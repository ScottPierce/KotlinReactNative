{"version":3,"sources":["../../src/commands/start.ts"],"names":["startCommand","runtime","command","describe","builder","port","description","type","dev","default","interactive","INTERACTIVE_MODE_DEFAULT","minify","config","DEFAULT_CONFIG_FILENAME","eager","handler","argv","parsedEager","list","split","map","item","trim","length","directory","process","cwd","tempDir","path","isAbsolute","join","fs","mkdtempSync","os","tmpdir","configPath","projectConfig","platform","root","bundleMode","bundleTarget","assetsDest","undefined","maxWorkers","isTaken","isPortTaken","server","host","userChoice","inquirer","prompt","name","message","choices","complete","killProcess","e","logger","error","info","Server","noInteractive","platforms","bundleNames","Object","keys","bundles","skipHostCheck","listen","Promise","resolve","portTester","net","createServer","once","close","serviceToUse","stdout","PIDInfo","filter","entry","index","PID","kill","parseInt"],"mappings":"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","sourcesContent":["import yargs from 'yargs';\nimport {\n  DEFAULT_CONFIG_FILENAME,\n  INTERACTIVE_MODE_DEFAULT,\n  getProjectConfigPath,\n  getNormalizedProjectConfigBuilder,\n  Server,\n} from '@haul-bundler/core';\nimport { Runtime } from '@haul-bundler/core';\nimport inquirer from 'inquirer';\nimport net from 'net';\nimport { exec } from 'child_process';\nimport path from 'path';\nimport os from 'os';\nimport fs from 'fs';\n\nexport default function startCommand(runtime: Runtime) {\n  return {\n    command: 'start',\n    describe: 'Starts a new webpack server',\n    builder: {\n      port: {\n        description: 'Port to run your webpack server',\n        type: 'number',\n      },\n      dev: {\n        description: 'Whether to build in development mode',\n        default: true,\n        type: 'boolean',\n      },\n      interactive: {\n        description:\n          \"If 'false', disables any user prompts and prevents the UI (which requires a TTY session) from being rendered\",\n        default: INTERACTIVE_MODE_DEFAULT,\n        type: 'boolean',\n      },\n      minify: {\n        description: `Whether to minify the bundle, 'true' by default when dev=false`,\n        type: 'boolean',\n      },\n      'temp-dir': {\n        description:\n          'Path to directory where to store temporary files, eg. /tmp/dist',\n        type: 'string',\n      },\n      config: {\n        description: `Path to config file, eg. ${DEFAULT_CONFIG_FILENAME}`,\n        default: DEFAULT_CONFIG_FILENAME,\n        type: 'string',\n      },\n      eager: {\n        description: `Disable lazy building for platforms (list is separated by ',', for example 'haul bundle --eager ios,android')`,\n        default: 'false',\n        type: 'string',\n      },\n      'skip-host-check': {\n        description: 'Skips check for \"index\" or \"host\" bundle in Haul config',\n        default: false,\n        type: 'boolean',\n      },\n      'max-workers': {\n        description:\n          'Number of workers used to minify RAM bundle and load modules',\n        type: 'number',\n      },\n    },\n    async handler(\n      argv: yargs.Arguments<{\n        port?: number;\n        dev: boolean;\n        interactive?: boolean;\n        minify?: boolean;\n        tempDir?: string;\n        config: string;\n        eager: string;\n        maxWorkers?: number;\n        skipHostCheck: boolean;\n      }>\n    ) {\n      let parsedEager;\n      const list = (argv.eager || '').split(',').map(item => item.trim());\n      if (list.length === 1 && (list[0] === 'true' || list[0] === 'false')) {\n        parsedEager = list[0] === 'true' ? ['ios', 'android'] : [];\n      } else {\n        parsedEager = list;\n      }\n\n      const directory = process.cwd();\n\n      let tempDir: string;\n      if (argv.tempDir) {\n        tempDir = path.isAbsolute(argv.tempDir)\n          ? argv.tempDir\n          : path.join(directory, argv.tempDir);\n      } else {\n        tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'haul-start-'));\n      }\n\n      const configPath = getProjectConfigPath(directory, argv.config);\n      const projectConfig = getNormalizedProjectConfigBuilder(\n        runtime,\n        configPath\n      )(runtime, {\n        platform: '',\n        root: directory,\n        dev: argv.dev,\n        port: argv.port,\n        bundleMode: 'multi-bundle',\n        bundleTarget: 'server',\n        assetsDest: tempDir,\n        minify: argv.minify === undefined ? !argv.dev : argv.minify,\n        maxWorkers: argv.maxWorkers,\n      });\n\n      try {\n        const isTaken = await isPortTaken(\n          projectConfig.server.port,\n          projectConfig.server.host\n        );\n        if (isTaken) {\n          if (argv.interactive) {\n            const { userChoice } = await inquirer.prompt({\n              type: 'list',\n              name: 'userChoice',\n              message: `Port ${projectConfig.server.port} is already in use. What should we do?`,\n              choices: [\n                `Kill process using port ${projectConfig.server.port} and start Haul`,\n                'Quit',\n              ],\n            });\n            if (userChoice === 'Quit') {\n              runtime.complete(0);\n            }\n            try {\n              await killProcess(projectConfig.server.port);\n            } catch (e) {\n              runtime.logger.error(\n                `Could not kill process! Reason: \\n ${e.message}`\n              );\n              runtime.complete(1);\n            }\n            runtime.logger.info(`Successfully killed processes.`);\n          } else {\n            runtime.logger.error(\n              `Could not spawn process! Reason: Port ${projectConfig.server.port} already in use.`\n            );\n            runtime.complete(1);\n          }\n        }\n\n        new Server(runtime, configPath, {\n          dev: argv.dev,\n          noInteractive: !argv.interactive,\n          minify: argv.minify === undefined ? !argv.dev : argv.minify,\n          assetsDest: tempDir,\n          root: directory,\n          eager: parsedEager,\n          platforms: projectConfig.platforms,\n          bundleNames: Object.keys(projectConfig.bundles),\n          skipHostCheck: argv.skipHostCheck,\n        }).listen(projectConfig.server.host, projectConfig.server.port);\n      } catch (error) {\n        runtime.logger.error('Command failed with error:', error);\n        runtime.complete(1);\n      }\n    },\n  };\n}\n\n/*\n * Check if the port is already in use\n */\nfunction isPortTaken(port: number, host: string): Promise<boolean> {\n  return new Promise(resolve => {\n    const portTester = net\n      .createServer()\n      .once('error', () => {\n        return resolve(true);\n      })\n      .once('listening', () => {\n        portTester.close();\n        resolve(false);\n      })\n      .listen(port, host);\n  });\n}\n\nfunction killProcess(port: number): Promise<boolean> {\n  /*\n   * Based on platform, decide what service\n   * should be used to find process PID\n   */\n  const serviceToUse =\n    process.platform === 'win32'\n      ? `netstat -ano | findstr :${port}`\n      : `lsof -n -i:${port} | grep LISTEN`;\n\n  return new Promise(resolve => {\n    /*\n     * Find PID that is listening at given port\n     */\n    exec(serviceToUse, (error, stdout) => {\n      if (error) {\n        /*\n         * Error happens if no process found at given port\n         */\n        resolve(false);\n        return;\n      }\n      /*\n       * If no error, port is in use\n       * And that port is used only by one process\n       */\n      const PIDInfo = stdout\n        .trim()\n        .split('\\n')[0]\n        .split(' ')\n        .filter(entry => entry);\n\n      /* macOSX/Linux: PID is placed at index 1\n       * Windows: PID is placed at last index\n       */\n      const index = process.platform === 'win32' ? PIDInfo.length - 1 : 1;\n\n      const PID = PIDInfo[index];\n\n      /*\n       * Kill process\n       */\n      process.kill(parseInt(PID, 10), 'SIGKILL');\n\n      resolve(true);\n    });\n  });\n}\n"],"file":"start.js"}