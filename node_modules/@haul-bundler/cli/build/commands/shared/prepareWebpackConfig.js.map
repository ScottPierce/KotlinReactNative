{"version":3,"sources":["../../../src/commands/shared/prepareWebpackConfig.ts"],"names":["prepareWebpackConfig","runtime","options","directory","process","cwd","configPath","config","normalizedProjectConfigBuilder","projectConfig","platform","root","dev","bundleType","bundleMode","bundleTarget","assetsDest","bundleOutput","sourcemapOutput","minify","undefined","maxWorkers","webpackConfig","webpackConfigs","index","main","Error","progress","plugins","push","SimpleProgressWebpackPlugin","format"],"mappings":";;;;;;;AACA;;AAMA;;;;AAgBe,SAASA,oBAAT,CACbC,OADa,EAEbC,OAFa,EAGU;AACvB,QAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,EAAlB;AACA,QAAMC,UAAU,GAAG,gCAAqBH,SAArB,EAAgCD,OAAO,CAACK,MAAxC,CAAnB;AACA,QAAMC,8BAA8B,GAAG,6CACrCP,OADqC,EAErCK,UAFqC,CAAvC;AAIA,QAAMG,aAAa,GAAGD,8BAA8B,CAACP,OAAD,EAAU;AAC5DS,IAAAA,QAAQ,EAAER,OAAO,CAACQ,QAD0C;AAE5DC,IAAAA,IAAI,EAAER,SAFsD;AAG5DS,IAAAA,GAAG,EAAEV,OAAO,CAACU,GAH+C;AAI5DC,IAAAA,UAAU,EAAEX,OAAO,CAACW,UAJwC;AAK5DC,IAAAA,UAAU,EAAEZ,OAAO,CAACY,UALwC;AAM5DC,IAAAA,YAAY,EAAE,MAN8C;AAO5DC,IAAAA,UAAU,EAAEd,OAAO,CAACc,UAPwC;AAQ5DC,IAAAA,YAAY,EAAEf,OAAO,CAACe,YARsC;AAS5DC,IAAAA,eAAe,EAAEhB,OAAO,CAACgB,eATmC;AAU5DC,IAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAAR,KAAmBC,SAAnB,GAA+B,CAAClB,OAAO,CAACU,GAAxC,GAA8CV,OAAO,CAACiB,MAVF;AAW5DE,IAAAA,UAAU,EAAEnB,OAAO,CAACmB;AAXwC,GAAV,CAApD;AAcA,QAAMC,aAAa,GACjBb,aAAa,CAACc,cAAd,CAA6BC,KAA7B,IAAsCf,aAAa,CAACc,cAAd,CAA6BE,IADrE;;AAGA,MAAI,CAACH,aAAL,EAAoB;AAClB,UAAM,IAAII,KAAJ,CACJ,sGADI,CAAN;AAGD,GA5BsB,CA8BvB;;;AACA,MAAIxB,OAAO,CAACyB,QAAR,KAAqB,MAAzB,EAAiC;AAC/BL,IAAAA,aAAa,CAACM,OAAd,CAAuBC,IAAvB,CACE,IAAIC,oCAAJ,CAAgC;AAC9BC,MAAAA,MAAM,EAAE7B,OAAO,CAACyB;AADc,KAAhC,CADF;AAKD;;AAED,SAAOL,aAAP;AACD","sourcesContent":["import webpack from 'webpack';\nimport {\n  getProjectConfigPath,\n  getNormalizedProjectConfigBuilder,\n  Runtime,\n  EnvOptions,\n} from '@haul-bundler/core';\nimport SimpleProgressWebpackPlugin from 'simple-progress-webpack-plugin';\n\nexport type Options = {\n  config?: string;\n  dev: boolean;\n  minify?: boolean;\n  platform: string;\n  assetsDest?: string;\n  bundleOutput?: string;\n  sourcemapOutput?: string;\n  progress: string;\n  bundleType?: EnvOptions['bundleType'];\n  bundleMode: EnvOptions['bundleMode'];\n  maxWorkers?: number;\n};\n\nexport default function prepareWebpackConfig(\n  runtime: Runtime,\n  options: Options\n): webpack.Configuration {\n  const directory = process.cwd();\n  const configPath = getProjectConfigPath(directory, options.config);\n  const normalizedProjectConfigBuilder = getNormalizedProjectConfigBuilder(\n    runtime,\n    configPath\n  );\n  const projectConfig = normalizedProjectConfigBuilder(runtime, {\n    platform: options.platform,\n    root: directory,\n    dev: options.dev,\n    bundleType: options.bundleType,\n    bundleMode: options.bundleMode,\n    bundleTarget: 'file',\n    assetsDest: options.assetsDest,\n    bundleOutput: options.bundleOutput,\n    sourcemapOutput: options.sourcemapOutput,\n    minify: options.minify === undefined ? !options.dev : options.minify,\n    maxWorkers: options.maxWorkers,\n  });\n\n  const webpackConfig =\n    projectConfig.webpackConfigs.index || projectConfig.webpackConfigs.main;\n\n  if (!webpackConfig) {\n    throw new Error(\n      'Cannot find webpack config `index` nor `main`. Make sure you have bundle config for `index` or `main'\n    );\n  }\n\n  // Attach progress plugin\n  if (options.progress !== 'none') {\n    webpackConfig.plugins!.push(\n      new SimpleProgressWebpackPlugin({\n        format: options.progress,\n      }) as webpack.Plugin\n    );\n  }\n\n  return webpackConfig;\n}\n"],"file":"prepareWebpackConfig.js"}