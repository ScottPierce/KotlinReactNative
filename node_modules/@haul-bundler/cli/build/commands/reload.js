"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reloadCommand;

var _http = _interopRequireDefault(require("http"));

var _core = require("@haul-bundler/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function reloadCommand(runtime) {
  return {
    command: 'reload',
    describe: 'Sends reload request to all devices that enabled live reload',
    builder: {
      port: {
        description: 'Port your webpack server is running on',
        default: _core.DEFAULT_PORT,
        type: 'number'
      }
    },

    async handler(argv) {
      let exitCode = 0;

      try {
        const requestOptions = {
          hostname: 'localhost',
          port: argv.port,
          path: '/reloadapp',
          method: 'HEAD'
        };
        await new Promise(resolve => {
          const req = _http.default.request(requestOptions, () => {
            runtime.logger.done('Sent reload request.');
            resolve();
          });

          req.on('error', e => {
            const error = e.toString();

            if (error.includes('connect ECONNREFUSED')) {
              runtime.logger.error(`Reload request failed. Please make sure the packager server is running.`);
            } else {
              runtime.logger.error(e);
            }

            resolve();
          });
          req.end();
        });
      } catch (error) {
        runtime.logger.error('Command failed with error:', error);
        exitCode = 1;
      } finally {
        runtime.complete(exitCode);
      }
    }

  };
}
//# sourceMappingURL=reload.js.map