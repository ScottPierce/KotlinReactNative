"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = multiBundleCommand;

var _webpack = _interopRequireDefault(require("webpack"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _cpx = _interopRequireDefault(require("cpx"));

var _core = require("@haul-bundler/core");

var messages = _interopRequireWildcard(require("../messages/multiBundleMessages"));

var _simpleProgressWebpackPlugin = _interopRequireDefault(require("simple-progress-webpack-plugin"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function multiBundleCommand(runtime) {
  return {
    command: 'multi-bundle',
    describe: 'Create multiple bundles to be used in multi-bundle mode',
    builder: {
      dev: {
        description: 'If false, warnings are disabled and the bundle is minified (default: true)',
        default: true,
        type: 'boolean'
      },
      platform: {
        description: 'Either "ios" or "android" (default: "ios")',
        type: 'string'
      },
      minify: {
        description: 'Allows overriding whether bundle is minified. This defaults to false if dev is true, and true if dev is false. Disabling minification can be useful for speeding up production builds for testing purposes.',
        type: 'boolean'
      },
      'bundle-output': {
        description: 'Directory where to store generated bundles (filename is omitted if specified)',
        type: 'string'
      },
      'assets-dest': {
        description: 'Directory name where to store bundles and assets referenced in the bundle.',
        type: 'string'
      },
      'sourcemap-output': {
        description: 'File name where to store generated source map',
        type: 'string'
      },
      config: {
        description: 'Path to the CLI configuration file',
        type: 'string'
      },
      progress: {
        description: 'Display bundle compilation progress with different verbosity levels. Note that logging the compilation progress will increase build time. Defaults to `none` when you are building in production mode.',
        choices: ['none', 'minimal', 'compact', 'expanded', 'verbose']
      },
      'skip-host-check': {
        description: 'Skips check for "index" or "host" bundle in Haul config',
        type: 'boolean'
      },
      'max-workers': {
        description: 'Number of workers used to load modules',
        type: 'number'
      }
    },

    async handler(argv) {
      try {
        const {
          config,
          dev,
          minify,
          platform,
          assetsDest,
          bundleOutput,
          sourcemapOutput,
          progress,
          skipHostCheck,
          maxWorkers
        } = argv;
        process.env.HAUL_PLATFORM = platform;
        const directory = process.cwd();
        const configPath = (0, _core.getProjectConfigPath)(directory, config);
        const normalizedProjectConfigBuilder = (0, _core.getNormalizedProjectConfigBuilder)(runtime, configPath);
        const env = {
          platform,
          root: directory,
          dev,
          bundleMode: 'multi-bundle',
          bundleTarget: 'file',
          bundleOutput,
          assetsDest,
          sourcemapOutput,
          minify: minify === undefined ? !dev : minify,
          maxWorkers
        };
        const optionsWithProgress = { ...env,
          progress: progress !== undefined ? progress : !dev ? 'none' : // Ensure that we don't trip Xcode's error detection. 'verbose' is the
          // only level that doesn't make Xcode think that the bundle failed.
          !process.stdin.isTTY ? 'verbose' : 'compact'
        };
        const projectConfig = normalizedProjectConfigBuilder(runtime, optionsWithProgress);

        for (const bundleName of (0, _core.sortBundlesByDependencies)(projectConfig, {
          skipHostCheck
        })) {
          const bundleConfig = projectConfig.bundles[bundleName];

          if (bundleConfig.external) {
            runtime.logger.info(`Using external${bundleConfig.dll ? ' DLL' : ''} bundle`, runtime.logger.enhanceWithModifier('bold', bundleName));
            runtime.logger.info('Bundle path', runtime.logger.enhanceWithColor('gray', bundleConfig.external.bundlePath));

            if (bundleConfig.dll) {
              runtime.logger.info('Manifest path', runtime.logger.enhanceWithColor('gray', bundleConfig.external.manifestPath));
            }

            if (bundleConfig.external.copyBundle) {
              const filename = (0, _core.getBundleFilename)(env, projectConfig.templates, projectConfig.bundles[bundleName]); // `bundleOutput` should be a directory, but for backward-compatibility,
              // we also handle the case with a filename.

              let bundleOutputDirectory = bundleConfig.root;

              if (env.bundleOutput) {
                bundleOutputDirectory = _path.default.extname(env.bundleOutput) === '' ? env.bundleOutput : _path.default.dirname(env.bundleOutput);
                bundleOutputDirectory = _path.default.isAbsolute(bundleOutputDirectory) ? bundleOutputDirectory : _path.default.join(bundleConfig.root, bundleOutputDirectory);
              }

              _mkdirp.default.sync(bundleOutputDirectory);

              runtime.logger.info('Copying bundle to', runtime.logger.enhanceWithColor('gray', _path.default.join(bundleOutputDirectory, filename)));

              _fs.default.copyFileSync(bundleConfig.external.bundlePath, _path.default.join(bundleOutputDirectory, filename));

              if (_fs.default.existsSync(`${bundleConfig.external.bundlePath}.map`)) {
                _fs.default.copyFileSync(`${bundleConfig.external.bundlePath}.map`, _path.default.join(bundleOutputDirectory, `${filename}.map`));

                runtime.logger.info('Copying bundle source maps to', runtime.logger.enhanceWithColor('gray', _path.default.join(bundleOutputDirectory, `${filename}.map`)));
              }

              let assetsOutputDirectory = bundleConfig.root;

              if (env.assetsDest) {
                assetsOutputDirectory = env.assetsDest;
              } else if (env.bundleOutput) {
                assetsOutputDirectory = env.bundleOutput;
              }

              assetsOutputDirectory = _path.default.isAbsolute(assetsOutputDirectory) ? assetsOutputDirectory : _path.default.join(bundleConfig.root, assetsOutputDirectory);

              _cpx.default.copySync(_path.default.join(bundleConfig.external.assetsPath, '**/*.{aac,aiff,bmp,caf,gif,html,jpeg,jpg,m4a,m4v,mov,mp3,mp4,mpeg,mpg,obj,otf,pdf,png,psd,svg,ttf,wav,webm,webp}'), assetsOutputDirectory, {
                preserve: true
              });
            }

            continue;
          }

          try {
            const webpackConfig = projectConfig.webpackConfigs[bundleName]; // Attach progress plugin

            if (progress !== 'none') {
              webpackConfig.plugins.push(new _simpleProgressWebpackPlugin.default({
                format: progress
              }));
            }

            messages.initialBundleInformation(runtime, {
              bundleName,
              webpackConfig
            });
            const stats = await build(webpackConfig);
            runtime.logger.print('');
            messages.bundleBuilt(runtime, {
              stats
            });
          } catch (error) {
            runtime.logger.error(`${bundleName} bundle compilation failed`);
            throw error;
          }
        }

        runtime.logger.done('All bundles successfully compiled. You can now run your React Native multi-bundle app.');
        runtime.complete();
      } catch (error) {
        runtime.logger.error(error);
        runtime.complete(1);
      }
    }

  };
}

function build(webpackConfig) {
  const compiler = (0, _webpack.default)(webpackConfig);
  return new Promise((resolve, reject) => compiler.run((err, info) => {
    if (err || info.hasErrors()) {
      reject(err ? err : new Error(info.toJson({
        errorDetails: true
      }).errors.join('\n')));
    } else {
      resolve(info);
    }
  }));
}
//# sourceMappingURL=multiBundle.js.map