"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = initCommand;

var _core = require("@haul-bundler/core");

var _ora = _interopRequireDefault(require("ora"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _dedent = _interopRequireDefault(require("dedent"));

var _which = _interopRequireDefault(require("which"));

var _execa = _interopRequireDefault(require("execa"));

var _npmRegistryFetch = _interopRequireDefault(require("npm-registry-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const delay = time => new Promise(resolve => setTimeout(resolve, time));

async function checkProject(progress, cwd, runtime) {
  progress.start('Checking project files');
  await delay(1000); // Are we inside a React Native project?

  if ((0, _core.getReactNativeVersion)(cwd)) {
    progress.succeed('Project looks good');
  } else {
    progress.fail(_dedent.default`
    This doesn't seem to be a React Native project.

    Make sure you have a ${runtime.logger.enhanceWithModifier('bold', 'package.json')} file with ${runtime.logger.enhanceWithModifier('bold', 'react-native')} in dependencies, and you have installed these dependencies.

    To generate a React Native project, run ${runtime.logger.enhanceWithModifier('bold', 'react-native init <ProjectName>')}. See ${runtime.logger.enhanceWithColor('cyan', 'https://facebook.github.io/react-native/docs/getting-started.html')} for details.
  `);
    runtime.complete(1);
  }
}

async function createHaulProjectConfig(progress, cwd, runtime, preset) {
  // Does `haul.config.js` already exist?
  let overwrite = true;

  if (_fs.default.existsSync(_path.default.join(cwd, _core.DEFAULT_CONFIG_FILENAME))) {
    overwrite = (await _inquirer.default.prompt([{
      type: 'confirm',
      name: 'overwrite',
      message: `There is already a '${_core.DEFAULT_CONFIG_FILENAME}'. Overwrite it?`
    }])).overwrite;
  }

  if (!overwrite) {
    return;
  }

  progress.start('Generating config files');
  await delay(1000);
  const config = _dedent.default`
    import { withPolyfills, makeConfig } from "${preset}";

    export default makeConfig({
      bundles: {
        index: {
          entry: withPolyfills('./index'),
        },
      },
    });
  `;

  _fs.default.writeFileSync(_path.default.join(cwd, _core.DEFAULT_CONFIG_FILENAME), config);

  progress.succeed(`Generated ${runtime.logger.enhanceWithModifier('bold', _core.DEFAULT_CONFIG_FILENAME)}`);
}

async function modifyBabelConfig(progress, cwd, runtime, babelPreset) {
  progress.start('Updating Babel config');
  const defaultBabelConfigPaths = [_path.default.join(cwd, 'babel.config.js'), _path.default.join(cwd, '.babelrc.js'), _path.default.join(cwd, '.babelrc')];
  let babelConfigPath = defaultBabelConfigPaths.find(filePath => _fs.default.existsSync(filePath));

  if (!babelConfigPath) {
    const result = await _inquirer.default.prompt([{
      type: 'input',
      name: 'entry',
      message: 'Enter path to the Babel config file',
      validate: pathToFile => _fs.default.existsSync(pathToFile) ? true : `${pathToFile} is not a valid`
    }]);
    babelConfigPath = _path.default.resolve(result.entry);
  }

  const babelConfig = _fs.default.readFileSync(babelConfigPath).toString();

  _fs.default.writeFileSync(babelConfigPath, babelConfig.replace('metro-react-native-babel-preset', babelPreset));

  progress.succeed(`Updated Babel config at ${runtime.logger.enhanceWithModifier('bold', _path.default.relative(cwd, babelConfigPath))}`);
}

async function modifyXcodeProject(progress, cwd) {
  let xcodeProject; // Does `ios/*.xcodeproj` exist?

  const iosPath = _path.default.join(cwd, 'ios');

  if (_fs.default.existsSync(iosPath)) {
    xcodeProject = _fs.default.readdirSync(iosPath).find(file => file.includes('.xcodeproj'));
    xcodeProject = _path.default.join(iosPath, xcodeProject || '');
  } // Otherwise, ask for path to a file


  if (!xcodeProject) {
    const result = await _inquirer.default.prompt([{
      type: 'input',
      name: 'entry',
      message: 'Enter path to the .xcodeproj file',
      validate: pathToFile => _fs.default.existsSync(pathToFile) && pathToFile.includes('.xcodeproj') ? true : `${pathToFile} is not a valid .xcodeproj`
    }]);
    xcodeProject = _path.default.resolve(result.entry);
  }

  progress.start('Adding haul to your Xcode build scripts');
  await delay(1000);

  let project = _fs.default.readFileSync(_path.default.join(xcodeProject, 'project.pbxproj')).toString();

  const haulSignature = 'added by Haul';
  /* Make sure we check both project iOS and iOS-TV, that's the magic behind "2" constant */

  const PROJECTS_COUNT = 2;

  const countOccurrences = search => {
    return project.split(search).length - 1;
  }; // Are we already integrated?


  if (countOccurrences(haulSignature) === PROJECTS_COUNT) {
    progress.info('Haul is already part of your build scripts');
    return;
  }

  const originalTask = 'shellScript = "export NODE_BINARY=node';

  if (countOccurrences(originalTask) !== PROJECTS_COUNT) {
    progress.warn(`Couldn't edit Xcode project. Haven't recognized 'Bundle React Native code and images' build phase.`);
    return;
  }

  const haulTask = `shellScript = "# ${haulSignature}\\nexport CLI_PATH=node_modules/@haul-bundler/cli/bin/haul.js\\nexport NODE_BINARY=node`;
  project = project.replace(new RegExp(originalTask, 'g'), haulTask);

  _fs.default.writeFileSync(_path.default.join(xcodeProject, 'project.pbxproj'), project);

  progress.succeed('Added haul to your Xcode build scripts');
}

async function modifyGradleBuild(progress, cwd) {
  let gradleBuildFile; // Does `android/app/build.gradle` exist?

  const androidPath = _path.default.join(cwd, 'android/app');

  if (_fs.default.existsSync(androidPath)) {
    gradleBuildFile = _fs.default.readdirSync(androidPath).find(file => file.includes('build.gradle'));
    gradleBuildFile = _path.default.join(androidPath, gradleBuildFile || '');
  } // Otherwise, ask for path to a file


  if (!gradleBuildFile) {
    const result = await _inquirer.default.prompt([{
      type: 'input',
      name: 'entry',
      message: 'Enter path to the android/app/build.gradle file',
      validate: pathToFile => _fs.default.existsSync(pathToFile) && pathToFile.includes('build.gradle') ? true : `${pathToFile} is not a valid build.gradle`
    }]);
    gradleBuildFile = _path.default.resolve(result.entry);
  }

  progress.start('Adding haul to your build.gradle');
  await delay(1000);

  let project = _fs.default.readFileSync(gradleBuildFile).toString();

  const cliString = '"node_modules/@haul-bundler/cli/bin/haul.js"'; // Are we already integrated?

  if (project.includes(cliString)) {
    progress.info('Haul is already part of your build.gradle');
    return;
  }

  project = project.replace(/project\.ext\.react = \[\n([^\]]+)\n\]/, _dedent.default`
    project.ext.react = [
    $1,
        cliPath: ${cliString}
    ]
    `);

  _fs.default.writeFileSync(gradleBuildFile, project);

  progress.succeed('Added haul to your build.gradle');
}

function getRunScript(scriptName) {
  return `yarn run ${scriptName}`;
}

async function addHaulScript(progress, cwd) {
  const packageJson = require(_path.default.join(cwd, 'package.json'));

  const scripts = packageJson.scripts || {};
  const haulScript = Object.keys(scripts).find(name => scripts[name] === 'haul');

  if (haulScript) {
    progress.info('Haul already exists in your package.json.');
    return haulScript;
  }

  let scriptName = 'start';

  if (scripts.start && scripts.start !== 'node node_modules/react-native/local-cli/cli.js start') {
    const result = await _inquirer.default.prompt([{
      type: 'input',
      name: 'scriptName',
      message: 'Enter the name of the script to add to package.json, e.g. `haul` for `yarn run haul`',
      default: 'haul'
    }]);
    scriptName = result.scriptName;
  }

  packageJson.scripts = Object.assign({}, scripts, {
    [scriptName]: 'haul start'
  });
  progress.start(`Adding \`${scriptName}\` script to your package.json`);
  await delay(1000);

  _fs.default.writeFileSync(_path.default.join(cwd, 'package.json'), JSON.stringify(packageJson, null, 2));

  return scriptName;
}

async function getAvailableHaulPreset(progress, targetHaulPreset) {
  // Stop searching on 0.59 - there's no preset below 0.59.
  if (targetHaulPreset.includes('0.59')) {
    return targetHaulPreset;
  }

  try {
    await (0, _npmRegistryFetch.default)(targetHaulPreset);
    return targetHaulPreset;
  } catch (error) {
    if (error.statusCode === 404) {
      progress.info(`${targetHaulPreset} not available. Trying older version...`);
      const previousHaulPreset = targetHaulPreset.replace(/-0\.\d+$/, match => {
        const [major, minor] = match.slice(1).split('.');
        return `-${major}.${parseInt(minor, 10) - 1}`;
      });
      return await getAvailableHaulPreset(progress, previousHaulPreset);
    }

    return targetHaulPreset;
  }
}

async function installDependencies(progress, {
  babelPreset,
  haulPreset
}) {
  progress.info('Installing required devDependencies');
  const useYarn = await new Promise(resolve => {
    (0, _which.default)('yarn', (_, resolved) => {
      resolve(Boolean(resolved));
    });
  });
  const installArgs = (useYarn ? ['add', '-D'] : ['install', '--save-dev']).concat(babelPreset, haulPreset);
  await (0, _execa.default)(useYarn ? 'yarn' : 'npm', installArgs, {
    stdio: 'inherit'
  });
}

function initCommand(runtime) {
  return {
    command: 'init',
    describe: 'Generates necessary configuration files',

    async handler() {
      let exitCode = 0;

      try {
        const cwd = process.cwd();
        const rnVersion = (0, _core.getReactNativeVersion)(cwd);

        if (!rnVersion) {
          runtime.logger.error('Cannot find React Native. Are you in React Native project?');
          runtime.complete(1);
        }

        const progress = (0, _ora.default)().start('Detecting Haul preset version...');
        const babelPreset = '@haul-bundler/babel-preset-react-native';
        const haulPreset = await getAvailableHaulPreset(progress, `@haul-bundler/preset-${rnVersion.major}.${rnVersion.minor}`);
        progress.info(`Using Haul preset: ${haulPreset}`);
        await checkProject(progress, cwd, runtime);
        await createHaulProjectConfig(progress, cwd, runtime, haulPreset);
        await modifyBabelConfig(progress, cwd, runtime, babelPreset);
        await modifyXcodeProject(progress, cwd);
        await modifyGradleBuild(progress, cwd);
        const scriptName = await addHaulScript(progress, cwd);
        await installDependencies(progress, {
          babelPreset,
          haulPreset
        });
        progress.succeed(`You can now start Haul by running '${getRunScript(scriptName)}'`);
      } catch (error) {
        runtime.logger.error('Command failed with error:', error);
        exitCode = 1;
      } finally {
        runtime.complete(exitCode);
      }
    }

  };
}
//# sourceMappingURL=init.js.map