{"version":3,"sources":["../../src/commands/reload.ts"],"names":["reloadCommand","runtime","command","describe","builder","port","description","default","DEFAULT_PORT","type","handler","argv","exitCode","requestOptions","hostname","path","method","Promise","resolve","req","http","request","logger","done","on","e","error","toString","includes","end","complete"],"mappings":";;;;;;;AACA;;AACA;;;;AAEe,SAASA,aAAT,CAAuBC,OAAvB,EAAyC;AACtD,SAAO;AACLC,IAAAA,OAAO,EAAE,QADJ;AAELC,IAAAA,QAAQ,EAAE,8DAFL;AAGLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AACJC,QAAAA,WAAW,EAAE,wCADT;AAEJC,QAAAA,OAAO,EAAEC,kBAFL;AAGJC,QAAAA,IAAI,EAAE;AAHF;AADC,KAHJ;;AAUL,UAAMC,OAAN,CACEC,IADF,EAIE;AACA,UAAIC,QAAQ,GAAG,CAAf;;AACA,UAAI;AACF,cAAMC,cAAc,GAAG;AACrBC,UAAAA,QAAQ,EAAE,WADW;AAErBT,UAAAA,IAAI,EAAEM,IAAI,CAACN,IAFU;AAGrBU,UAAAA,IAAI,EAAE,YAHe;AAIrBC,UAAAA,MAAM,EAAE;AAJa,SAAvB;AAOA,cAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC3B,gBAAMC,GAAG,GAAGC,cAAKC,OAAL,CAAaR,cAAb,EAA6B,MAAM;AAC7CZ,YAAAA,OAAO,CAACqB,MAAR,CAAeC,IAAf,CAAoB,sBAApB;AACAL,YAAAA,OAAO;AACR,WAHW,CAAZ;;AAKAC,UAAAA,GAAG,CAACK,EAAJ,CAAO,OAAP,EAAgBC,CAAC,IAAI;AACnB,kBAAMC,KAAK,GAAGD,CAAC,CAACE,QAAF,EAAd;;AACA,gBAAID,KAAK,CAACE,QAAN,CAAe,sBAAf,CAAJ,EAA4C;AAC1C3B,cAAAA,OAAO,CAACqB,MAAR,CAAeI,KAAf,CACG,yEADH;AAGD,aAJD,MAIO;AACLzB,cAAAA,OAAO,CAACqB,MAAR,CAAeI,KAAf,CAAqBD,CAArB;AACD;;AACDP,YAAAA,OAAO;AACR,WAVD;AAYAC,UAAAA,GAAG,CAACU,GAAJ;AACD,SAnBK,CAAN;AAoBD,OA5BD,CA4BE,OAAOH,KAAP,EAAc;AACdzB,QAAAA,OAAO,CAACqB,MAAR,CAAeI,KAAf,CAAqB,4BAArB,EAAmDA,KAAnD;AACAd,QAAAA,QAAQ,GAAG,CAAX;AACD,OA/BD,SA+BU;AACRX,QAAAA,OAAO,CAAC6B,QAAR,CAAiBlB,QAAjB;AACD;AACF;;AAlDI,GAAP;AAoDD","sourcesContent":["import { Arguments } from 'yargs';\nimport http from 'http';\nimport { Runtime, DEFAULT_PORT } from '@haul-bundler/core';\n\nexport default function reloadCommand(runtime: Runtime) {\n  return {\n    command: 'reload',\n    describe: 'Sends reload request to all devices that enabled live reload',\n    builder: {\n      port: {\n        description: 'Port your webpack server is running on',\n        default: DEFAULT_PORT,\n        type: 'number',\n      },\n    },\n    async handler(\n      argv: Arguments<{\n        port: number;\n      }>\n    ) {\n      let exitCode = 0;\n      try {\n        const requestOptions = {\n          hostname: 'localhost',\n          port: argv.port,\n          path: '/reloadapp',\n          method: 'HEAD',\n        };\n\n        await new Promise(resolve => {\n          const req = http.request(requestOptions, () => {\n            runtime.logger.done('Sent reload request.');\n            resolve();\n          });\n\n          req.on('error', e => {\n            const error = e.toString();\n            if (error.includes('connect ECONNREFUSED')) {\n              runtime.logger.error(\n                `Reload request failed. Please make sure the packager server is running.`\n              );\n            } else {\n              runtime.logger.error(e);\n            }\n            resolve();\n          });\n\n          req.end();\n        });\n      } catch (error) {\n        runtime.logger.error('Command failed with error:', error);\n        exitCode = 1;\n      } finally {\n        runtime.complete(exitCode);\n      }\n    },\n  };\n}\n"],"file":"reload.js"}