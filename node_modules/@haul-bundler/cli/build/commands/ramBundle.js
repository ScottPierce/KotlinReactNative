"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ramBundleCommand;

var _webpack = _interopRequireDefault(require("webpack"));

var messages = _interopRequireWildcard(require("../messages/bundleMessages"));

var _prepareWebpackConfig = _interopRequireDefault(require("./shared/prepareWebpackConfig"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramBundleCommand(runtime) {
  return {
    command: 'ram-bundle',
    describe: 'Create ram-bundle',
    builder: {
      dev: {
        description: 'If false, warnings are disabled and the bundle is minified (default: true)',
        default: true,
        type: 'boolean'
      },
      'entry-file': {
        description: 'Path to the root JS file, either absolute or relative to JS root',
        type: 'string'
      },
      platform: {
        description: 'Either "ios" or "android" (default: "ios")',
        type: 'string'
      },
      'indexed-ram-bundle': {
        description: 'Force the "Indexed RAM" bundle file format, even when building for android.',
        type: 'boolean'
      },
      minify: {
        description: 'Allows overriding whether bundle is minified. This defaults to false if dev is true, and true if dev is false. Disabling minification can be useful for speeding up production builds for testing purposes.',
        type: 'boolean'
      },
      'bundle-output': {
        description: 'File name where to store the resulting bundle, ex. /tmp/groups.bundle.',
        type: 'string'
      },
      'assets-dest': {
        description: 'Directory name where to store assets referenced in the bundle.',
        type: 'string'
      },
      'sourcemap-output': {
        description: 'File name where to store generated source map',
        type: 'string'
      },
      config: {
        description: 'Path to the CLI configuration file',
        type: 'string'
      },
      progress: {
        description: 'Display bundle compilation progress with different verbosity levels. Note that logging the compilation progress will increase build time. Defaults to `none` when you are building in production mode.',
        choices: ['none', 'minimal', 'compact', 'expanded', 'verbose']
      },
      'max-workers': {
        description: 'Number of workers used to minify RAM bundle and load modules',
        type: 'number'
      }
    },

    async handler(argv) {
      try {
        const {
          config,
          dev,
          minify,
          platform,
          assetsDest,
          bundleOutput,
          sourcemapOutput,
          progress,
          indexedRamBundle,
          maxWorkers
        } = argv;
        process.env.HAUL_PLATFORM = platform;
        const webpackConfig = (0, _prepareWebpackConfig.default)(runtime, {
          config,
          dev,
          minify: minify === undefined ? !dev : minify,
          platform,
          assetsDest,
          bundleOutput,
          sourcemapOutput,
          progress: progress !== undefined ? progress : !dev ? 'none' : // Ensure that we don't trip Xcode's error detection. 'verbose' is the
          // only level that doesn't make Xcode think that the bundle failed.
          !process.stdin.isTTY ? 'verbose' : 'compact',
          bundleType: !indexedRamBundle && platform == 'android' ? 'file-ram-bundle' : 'indexed-ram-bundle',
          bundleMode: 'single-bundle',
          maxWorkers
        });
        messages.initialInformation(runtime, {
          config: webpackConfig
        });
        messages.initialBundleInformation(runtime, {
          entry: webpackConfig.entry,
          dev
        });
        const compiler = (0, _webpack.default)(webpackConfig);
        const stats = await new Promise((resolve, reject) => compiler.run((err, info) => {
          if (err || info.hasErrors()) {
            messages.buildFailed(runtime);
            reject(err ? err : info.toJson({
              errorDetails: true
            }).errors.join('\n'));
          } else {
            resolve(info);
          }
        }));
        messages.bundleBuilt(runtime, {
          stats,
          platform,
          assetsPath: webpackConfig.output.path,
          bundlePath: webpackConfig.output.filename
        });
        runtime.complete();
      } catch (error) {
        runtime.logger.error(error);
        runtime.complete(1);
      }
    }

  };
}
//# sourceMappingURL=ramBundle.js.map