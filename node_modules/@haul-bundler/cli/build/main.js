"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = main;

var _yargs = _interopRequireDefault(require("yargs"));

var _yargsParser = _interopRequireDefault(require("yargs-parser"));

var _core = require("@haul-bundler/core");

var _init = _interopRequireDefault(require("./commands/init"));

var _bundle = _interopRequireDefault(require("./commands/bundle"));

var _ramBundle = _interopRequireDefault(require("./commands/ramBundle"));

var _reload = _interopRequireDefault(require("./commands/reload"));

var _start = _interopRequireDefault(require("./commands/start"));

var _multiBundle = _interopRequireDefault(require("./commands/multiBundle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function main() {
  const {
    NODE_INSPECTOR
  } = process.env;
  let {
    nodeInspector
  } = (0, _yargsParser.default)(process.argv);
  nodeInspector = nodeInspector || NODE_INSPECTOR;
  const runtime = new _core.Runtime(); // Experimental

  if (nodeInspector) {
    const wait = nodeInspector === 'wait';

    const inspector = require('inspector');

    inspector.open(undefined, undefined, wait);
  }

  [_init.default, _bundle.default, _ramBundle.default, _reload.default, _start.default, _multiBundle.default].reduce((yargsInstance, commandBuilder) => {
    const commandModule = commandBuilder(runtime);
    return yargsInstance.command({ ...commandModule,

      handler(...args) {
        if (args[0].verbose) {
          runtime.logger.minLoggingLevel = _core.Logger.Level.Debug;
        }

        if (args[0].outputFile && typeof args[0].outputFile === 'string') {
          runtime.logger.enableFileLogging(args[0].outputFile, {
            json: Boolean(args[0].json)
          });
        }

        try {
          const results = commandModule.handler(...args);

          if (results === null || results === void 0 ? void 0 : results.catch) {
            results.catch(error => {
              runtime.unhandledError(error);
              runtime.complete(1);
            });
          }
        } catch (error) {
          runtime.unhandledError(error);
          runtime.complete(1);
        }
      }

    });
  }, _yargs.default).demandCommand(1).help('h').alias('h', 'help').alias('v', 'version').option('verbose', {
    describe: 'Print all logs including debug messages.',
    type: 'boolean'
  }).option('output-file <filename>', {
    describe: 'Log all messages to a file.',
    type: 'string'
  }).option('json', {
    describe: 'When --output-file is set, log each message as a JSON object.',
    type: 'boolean'
  }).version().argv;
}
//# sourceMappingURL=main.js.map