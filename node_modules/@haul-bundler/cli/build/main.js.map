{"version":3,"sources":["../src/main.ts"],"names":["main","NODE_INSPECTOR","process","env","nodeInspector","argv","runtime","Runtime","wait","inspector","require","open","undefined","initCommand","bundleCommand","ramBundleCommand","reloadCommand","startCommand","multiBundleCommand","reduce","yargsInstance","commandBuilder","commandModule","command","handler","args","verbose","logger","minLoggingLevel","Logger","Level","Debug","outputFile","enableFileLogging","json","Boolean","results","catch","error","unhandledError","complete","yargs","demandCommand","help","alias","option","describe","type","version"],"mappings":"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","sourcesContent":["import yargs from 'yargs';\nimport yargsParser from 'yargs-parser';\nimport { Logger, Runtime } from '@haul-bundler/core';\nimport initCommand from './commands/init';\nimport bundleCommand from './commands/bundle';\nimport ramBundleCommand from './commands/ramBundle';\nimport reloadCommand from './commands/reload';\nimport startCommand from './commands/start';\nimport multiBundleCommand from './commands/multiBundle';\n\nexport default async function main() {\n  const { NODE_INSPECTOR } = process.env;\n  let { nodeInspector } = yargsParser(process.argv);\n  nodeInspector = nodeInspector || NODE_INSPECTOR;\n\n  const runtime = new Runtime();\n\n  // Experimental\n  if (nodeInspector) {\n    const wait = nodeInspector === 'wait';\n    const inspector = require('inspector');\n    inspector.open(undefined, undefined, wait);\n  }\n\n  [\n    initCommand,\n    bundleCommand,\n    ramBundleCommand,\n    reloadCommand,\n    startCommand,\n    multiBundleCommand,\n  ]\n    .reduce((yargsInstance, commandBuilder) => {\n      const commandModule = commandBuilder(runtime) as yargs.CommandModule;\n      return yargsInstance.command({\n        ...commandModule,\n        handler(...args) {\n          if (args[0].verbose) {\n            runtime.logger.minLoggingLevel = Logger.Level.Debug;\n          }\n\n          if (args[0].outputFile && typeof args[0].outputFile === 'string') {\n            runtime.logger.enableFileLogging(args[0].outputFile, {\n              json: Boolean(args[0].json),\n            });\n          }\n\n          try {\n            const results = commandModule.handler(...args) as\n              | undefined\n              | Promise<unknown>;\n            if (results?.catch) {\n              results.catch(error => {\n                runtime.unhandledError(error);\n                runtime.complete(1);\n              });\n            }\n          } catch (error) {\n            runtime.unhandledError(error);\n            runtime.complete(1);\n          }\n        },\n      });\n    }, yargs)\n    .demandCommand(1)\n    .help('h')\n    .alias('h', 'help')\n    .alias('v', 'version')\n    .option('verbose', {\n      describe: 'Print all logs including debug messages.',\n      type: 'boolean',\n    })\n    .option('output-file <filename>', {\n      describe: 'Log all messages to a file.',\n      type: 'string',\n    })\n    .option('json', {\n      describe: 'When --output-file is set, log each message as a JSON object.',\n      type: 'boolean',\n    })\n    .version().argv;\n}\n"],"file":"main.js"}