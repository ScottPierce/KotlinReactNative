{"version":3,"sources":["../../src/messages/multiBundleMessages.ts"],"names":["initialBundleInformation","runtime","bundleName","webpackConfig","name","logger","enhanceWithModifier","mode","info","enhanceWithColor","output","path","filename","join","entry","split","map","line","repeat","getBuildTime","stats","jsonStats","toJson","timings","time","Math","max","children","bundleBuilt","warnings","hasWarnings","warn","toFixed","done"],"mappings":";;;;;;;;AAAA;;AAEA;;;;AAEO,SAASA,wBAAT,CACLC,OADK,EAEL;AACEC,EAAAA,UADF;AAEEC,EAAAA;AAFF,CAFK,EAML;AACA,QAAMC,IAAI,GAAGH,OAAO,CAACI,MAAR,CAAeC,mBAAf,CAAmC,MAAnC,EAA2CJ,UAA3C,CAAb;AACA,QAAMK,IAAI,GAAGN,OAAO,CAACI,MAAR,CAAeC,mBAAf,CAAmC,MAAnC,EAA2CH,aAAa,CAACI,IAAzD,CAAb;AAEAN,EAAAA,OAAO,CAACI,MAAR,CAAeG,IAAf,CAAqB,yBAAwBJ,IAAK,cAAaG,IAAK,SAApE;AACAN,EAAAA,OAAO,CAACI,MAAR,CAAeG,IAAf,CACG,uBAAsBP,OAAO,CAACI,MAAR,CAAeI,gBAAf,CACrB,MADqB,EAErBN,aAAa,CAACO,MAAd,CAAsBC,IAFD,CAGrB,EAJJ;AAMAV,EAAAA,OAAO,CAACI,MAAR,CAAeG,IAAf,CACG,kBAAiBP,OAAO,CAACI,MAAR,CAAeI,gBAAf,CAChB,MADgB,EAEhBN,aAAa,CAACO,MAAd,CAAsBE,QAFN,CAGhB,EAJJ;AAMAX,EAAAA,OAAO,CAACI,MAAR,CAAeG,IAAf,CACG,6BAA4BP,OAAO,CAACI,MAAR,CAAeI,gBAAf,CAC3B,MAD2B,EAE3BE,cAAKE,IAAL,CACEV,aAAa,CAACO,MAAd,CAAsBC,IADxB,EAEER,aAAa,CAACO,MAAd,CAAsBE,QAFxB,CAF2B,CAM3B,EAPJ;AASAX,EAAAA,OAAO,CAACI,MAAR,CAAeG,IAAf,CACG,mBAAkBP,OAAO,CAACI,MAAR,CAAeI,gBAAf,CACjB,MADiB,EAEf,sBAAWN,aAAa,CAACW,KAAzB,CAAF,CACGC,KADH,CACS,IADT,EAEGC,GAFH,CAEQC,IAAD,IAAmB,GAAE,IAAIC,MAAJ,CAAW,CAAX,CAAc,GAAED,IAAK,EAFjD,EAGGJ,IAHH,CAGQ,IAHR,CAFiB,CAMjB,EAPJ;AASD;;AAED,SAASM,YAAT,CAAsBC,KAAtB,EAA4C;AAC1C,QAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAlB;AACA,SAAOF,SAAS,CAACG,IAAV,GACHH,SAAS,CAACG,IADP,GAEHC,IAAI,CAACC,GAAL,CAAS,GAAGL,SAAS,CAACM,QAAV,CAAoBX,GAApB,CAAwB,CAAC;AAAEQ,IAAAA;AAAF,GAAD,KAAmBA,IAA3C,CAAZ,CAFJ;AAGD;;AAEM,SAASI,WAAT,CACL3B,OADK,EAEL;AACEmB,EAAAA;AADF,CAFK,EAOL;AACA,QAAMS,QAAQ,GAAGT,KAAK,CAACE,MAAN,CAAa;AAAEO,IAAAA,QAAQ,EAAE;AAAZ,GAAb,EAAiCA,QAAlD;;AACA,MAAIT,KAAK,CAACU,WAAN,EAAJ,EAAyB;AACvB7B,IAAAA,OAAO,CAACI,MAAR,CAAe0B,IAAf,CACG,0BAAyB,CAACZ,YAAY,CAACC,KAAD,CAAZ,GAAsB,IAAvB,EAA6BY,OAA7B,CAAqC,CAArC,CAAwC,IADpE;AAGA/B,IAAAA,OAAO,CAACI,MAAR,CAAe0B,IAAf,CAAoBF,QAAQ,CAAChB,IAAT,CAAc,IAAd,CAApB;AACD,GALD,MAKO;AACLZ,IAAAA,OAAO,CAACI,MAAR,CAAe4B,IAAf,CACG,yBAAwB,CAACd,YAAY,CAACC,KAAD,CAAZ,GAAsB,IAAvB,EAA6BY,OAA7B,CAAqC,CAArC,CAAwC,IADnE;AAGD;AACF","sourcesContent":["import { Runtime, parseEntry } from '@haul-bundler/core';\nimport webpack from 'webpack';\nimport path from 'path';\n\nexport function initialBundleInformation(\n  runtime: Runtime,\n  {\n    bundleName,\n    webpackConfig,\n  }: { bundleName: string; webpackConfig: webpack.Configuration }\n) {\n  const name = runtime.logger.enhanceWithModifier('bold', bundleName);\n  const mode = runtime.logger.enhanceWithModifier('bold', webpackConfig.mode);\n\n  runtime.logger.info(`Haul is now compiling ${name} bundle in ${mode} mode\\n`);\n  runtime.logger.info(\n    `Assets Destination: ${runtime.logger.enhanceWithColor(\n      'gray',\n      webpackConfig.output!.path\n    )}`\n  );\n  runtime.logger.info(\n    `Bundle output: ${runtime.logger.enhanceWithColor(\n      'gray',\n      webpackConfig.output!.filename\n    )}`\n  );\n  runtime.logger.info(\n    `Bundle output (resolved): ${runtime.logger.enhanceWithColor(\n      'gray',\n      path.join(\n        webpackConfig.output!.path!,\n        webpackConfig.output!.filename! as string\n      )\n    )}`\n  );\n  runtime.logger.info(\n    `Starting from:\\n${runtime.logger.enhanceWithColor(\n      'gray',\n      ((parseEntry(webpackConfig.entry!) as unknown) as string)\n        .split('\\n')\n        .map((line: string) => `${' '.repeat(7)}${line}`)\n        .join('\\n')\n    )}`\n  );\n}\n\nfunction getBuildTime(stats: webpack.Stats) {\n  const jsonStats = stats.toJson({ timings: true });\n  return jsonStats.time\n    ? jsonStats.time\n    : Math.max(...jsonStats.children!.map(({ time }: any) => time));\n}\n\nexport function bundleBuilt(\n  runtime: Runtime,\n  {\n    stats,\n  }: {\n    stats: webpack.Stats;\n  }\n) {\n  const warnings = stats.toJson({ warnings: true }).warnings;\n  if (stats.hasWarnings()) {\n    runtime.logger.warn(\n      `Built with warnings in ${(getBuildTime(stats) / 1000).toFixed(2)}s!`\n    );\n    runtime.logger.warn(warnings.join('\\n'));\n  } else {\n    runtime.logger.done(\n      `Built successfully in ${(getBuildTime(stats) / 1000).toFixed(2)}s!`\n    );\n  }\n}\n"],"file":"multiBundleMessages.js"}