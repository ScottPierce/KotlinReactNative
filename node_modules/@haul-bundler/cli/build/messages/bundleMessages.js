"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialInformation = initialInformation;
exports.initialBundleInformation = initialBundleInformation;
exports.buildFailed = buildFailed;
exports.bundleBuilt = bundleBuilt;

var _core = require("@haul-bundler/core");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initialInformation(runtime, {
  config
}) {
  runtime.logger.info(`Assets Destination: ${runtime.logger.enhanceWithColor('gray', config.output.path)}`);
  runtime.logger.info(`Bundle output: ${runtime.logger.enhanceWithColor('gray', config.output.filename)}`);
  runtime.logger.info(`Bundle output (resolved): ${runtime.logger.enhanceWithColor('gray', _path.default.resolve(config.output.filename))}`);
}

function initialBundleInformation(runtime, {
  entry,
  dev
}) {
  const mode = dev ? 'development' : 'production';
  runtime.logger.info(`Haul is now bundling your React Native app in ${runtime.logger.enhanceWithModifier('bold', mode)} mode`);
  runtime.logger.info(`Starting from:\n${runtime.logger.enhanceWithColor('gray', (0, _core.parseEntry)(entry))}`);
}

function buildFailed(runtime) {
  runtime.logger.error('Failed to compile.');
}

function getBuildTime(stats) {
  const jsonStats = stats.toJson({
    timings: true
  });
  return jsonStats.time ? jsonStats.time : Math.max(...jsonStats.children.map(({
    time
  }) => time));
}

function bundleBuilt(runtime, args) {
  const warnings = args.stats.toJson({
    warnings: true
  }).warnings;

  if (args.stats.hasWarnings()) {
    runtime.logger.warn(`Built with warnings in ${(getBuildTime(args.stats) / 1000).toFixed(2)}s!`);
    runtime.logger.warn(warnings.join('\n'));
  } else {
    runtime.logger.done(`Built successfully in ${(getBuildTime(args.stats) / 1000).toFixed(2)}s!`);
  }

  if (args.assetsPath && args.bundlePath) {
    runtime.logger.info(`Assets location: ${runtime.logger.enhanceWithColor('gray', args.assetsPath)}`);
    runtime.logger.info(`Bundle location: ${runtime.logger.enhanceWithColor('gray', _path.default.join(args.assetsPath, args.bundlePath))}`);
  }

  const device = args.platform === 'all' ? 'your device' : `your ${args.platform} device`;
  runtime.logger.done(`You can now run the app on ${device}`);
}
//# sourceMappingURL=bundleMessages.js.map