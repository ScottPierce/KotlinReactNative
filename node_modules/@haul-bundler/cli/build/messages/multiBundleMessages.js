"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialBundleInformation = initialBundleInformation;
exports.bundleBuilt = bundleBuilt;

var _core = require("@haul-bundler/core");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initialBundleInformation(runtime, {
  bundleName,
  webpackConfig
}) {
  const name = runtime.logger.enhanceWithModifier('bold', bundleName);
  const mode = runtime.logger.enhanceWithModifier('bold', webpackConfig.mode);
  runtime.logger.info(`Haul is now compiling ${name} bundle in ${mode} mode\n`);
  runtime.logger.info(`Assets Destination: ${runtime.logger.enhanceWithColor('gray', webpackConfig.output.path)}`);
  runtime.logger.info(`Bundle output: ${runtime.logger.enhanceWithColor('gray', webpackConfig.output.filename)}`);
  runtime.logger.info(`Bundle output (resolved): ${runtime.logger.enhanceWithColor('gray', _path.default.join(webpackConfig.output.path, webpackConfig.output.filename))}`);
  runtime.logger.info(`Starting from:\n${runtime.logger.enhanceWithColor('gray', (0, _core.parseEntry)(webpackConfig.entry).split('\n').map(line => `${' '.repeat(7)}${line}`).join('\n'))}`);
}

function getBuildTime(stats) {
  const jsonStats = stats.toJson({
    timings: true
  });
  return jsonStats.time ? jsonStats.time : Math.max(...jsonStats.children.map(({
    time
  }) => time));
}

function bundleBuilt(runtime, {
  stats
}) {
  const warnings = stats.toJson({
    warnings: true
  }).warnings;

  if (stats.hasWarnings()) {
    runtime.logger.warn(`Built with warnings in ${(getBuildTime(stats) / 1000).toFixed(2)}s!`);
    runtime.logger.warn(warnings.join('\n'));
  } else {
    runtime.logger.done(`Built successfully in ${(getBuildTime(stats) / 1000).toFixed(2)}s!`);
  }
}
//# sourceMappingURL=multiBundleMessages.js.map