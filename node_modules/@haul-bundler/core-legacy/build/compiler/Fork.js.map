{"version":3,"sources":["../../src/compiler/Fork.js"],"names":["EventEmitter","require","Events","createForkProcess","createWebSocketServer","forks","transportServer","module","exports","Fork","constructor","platform","options","isProcessing","enqueuedMessages","init","on","socket","req","platformMatch","url","match","Error","setSocket","err","emit","BUILD_FAILED","message","port","address","process","__dirname","forEach","type","payload","send","addEventListener","data","JSON","parse","toString","BUILD_FINISHED","error","BUILD_START","stringify","push","terminate","kill","close","Object","keys","length"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017-present, Callstack.\n * All rights reserved.\n *\n * @flow\n */\n\nimport type { Platform } from '../types';\n\nconst EventEmitter = require('events');\nconst Events = require('./events');\nconst createForkProcess = require('./createForkProcess');\nconst createWebSocketServer = require('./createWebSocketServer');\n\ntype ForkConstructorArgs = {\n  platform: Platform,\n  options: *,\n};\n\nconst forks = {};\nlet transportServer;\n\n/**\n * Fork class is a abstraction over fork process. It handles creation of the process,\n * communication over transport server (WebSocket server) and redirecting events from\n * Webpack compiler in fork process to Fork consumer.\n */\nmodule.exports = class Fork extends EventEmitter {\n  platform: Platform;\n  process: any;\n  socket: WebSocket;\n  enqueuedMessages: any[];\n  isProcessing: boolean;\n  options: any;\n\n  constructor({ platform, options }: ForkConstructorArgs) {\n    super();\n    this.isProcessing = true;\n    this.enqueuedMessages = [];\n    this.platform = platform;\n    this.options = options;\n  }\n\n  async init() {\n    if (!transportServer) {\n      // eslint-disable-next-line require-atomic-updates\n      transportServer = await createWebSocketServer();\n\n      // WebSocket connection is established after the Fork is created.\n      transportServer.on('connection', (socket, req) => {\n        const platformMatch = req.url.match(/platform=([^&]*)/);\n\n        if (!platformMatch) {\n          throw new Error('Incorrect platform');\n        }\n\n        forks[platformMatch[1]].setSocket(socket);\n\n        socket.on('error', err => {\n          this.emit(Events.BUILD_FAILED, {\n            message: `Socket: ${err}`,\n          });\n          throw err;\n        });\n      });\n    }\n\n    const { port } = transportServer.address();\n    this.process = createForkProcess(\n      this.platform,\n      __dirname,\n      `localhost:${port}`,\n      this.options\n    );\n\n    forks[this.platform] = this;\n  }\n\n  setSocket(socket: WebSocket) {\n    this.socket = socket;\n\n    // Flush enqueued messages.\n    this.enqueuedMessages.forEach(({ type, ...payload }) =>\n      this.send(type, payload)\n    );\n    this.enqueuedMessages = [];\n\n    // $FlowFixMe\n    this.socket.addEventListener('message', ({ data }) => {\n      const { type, ...payload } = JSON.parse(data.toString());\n\n      if (type === Events.BUILD_FINISHED && !payload.error) {\n        this.isProcessing = false;\n      } else if (\n        type === Events.BUILD_START ||\n        (type === Events.BUILD_FINISHED && payload.error)\n      ) {\n        this.isProcessing = true;\n      }\n\n      this.emit(type, {\n        platform: this.platform,\n        ...payload,\n      });\n    });\n  }\n\n  send(type: string, payload: any = {}) {\n    if (this.socket) {\n      this.socket.send(JSON.stringify({ type, ...payload }));\n    } else {\n      this.enqueuedMessages.push({ type, ...payload });\n    }\n  }\n\n  terminate() {\n    this.process.kill();\n    delete forks[this.platform];\n    if (this.socket) {\n      this.socket.close();\n    }\n\n    if (transportServer && !Object.keys(forks).length) {\n      transportServer.close();\n    }\n  }\n};\n"],"file":"Fork.js"}