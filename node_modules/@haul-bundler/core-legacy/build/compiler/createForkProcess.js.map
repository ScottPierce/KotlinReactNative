{"version":3,"sources":["../../src/compiler/createForkProcess.js"],"names":["spawn","require","path","module","exports","createForkProcess","platform","rootDir","address","options","workerPath","resolve","child","process","execPath","cwd","env","Object","assign","HAUL_PLATFORM","HAUL_DIRECTORY","join","HAUL_OPTIONS","JSON","stringify","HAUL_SOCKET_ADDRESS","stdio","stdout","on","data","console","log","toString","stderr","error"],"mappings":";;AAAA;;;;;;AASA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAgBAE,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CACfC,QADe,EAEfC,OAFe,EAGfC,OAHe,EAIfC,OAJe,EAKf;AACA,QAAMC,UAAU,GAAGR,IAAI,CAACS,OAAL,CAAaJ,OAAb,EAAsB,iBAAtB,CAAnB;AACA,QAAMK,KAAK,GAAGZ,KAAK,CAACa,OAAO,CAACC,QAAT,EAAmB,CAAC,kBAAD,EAAqBJ,UAArB,CAAnB,EAAqD;AACtEK,IAAAA,GAAG,EAAEF,OAAO,CAACE,GAAR,EADiE;AAEtEC,IAAAA,GAAG,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAO,CAACG,GAA1B,EAA+B;AAClCG,MAAAA,aAAa,EAAEb,QADmB;AAElCc,MAAAA,cAAc,EAAElB,IAAI,CAACmB,IAAL,CAAUd,OAAV,EAAmB,QAAnB,CAFkB;AAGlCe,MAAAA,YAAY,EAAEC,IAAI,CAACC,SAAL,CAAef,OAAf,CAHoB;AAIlCgB,MAAAA,mBAAmB,EAAEjB;AAJa,KAA/B,CAFiE;AAQtEkB,IAAAA,KAAK,EAAE;AAR+D,GAArD,CAAnB;AAWAd,EAAAA,KAAK,CAACe,MAAN,CAAaC,EAAb,CAAgB,MAAhB,EAAwBC,IAAI,IAAI;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,EAAZ;AACD,GAFD;AAIApB,EAAAA,KAAK,CAACqB,MAAN,CAAaL,EAAb,CAAgB,MAAhB,EAAwBC,IAAI,IAAI;AAC9BC,IAAAA,OAAO,CAACI,KAAR,CAAcL,IAAI,CAACG,QAAL,EAAd;AACD,GAFD;AAIApB,EAAAA,KAAK,CAACgB,EAAN,CAAS,OAAT,EAAkBM,KAAK,IAAI;AACzB,UAAMA,KAAN;AACD,GAFD;AAIA,SAAOtB,KAAP;AACD,CA/BD","sourcesContent":["/**\n * Copyright 2017-present, Callstack.\n * All rights reserved.\n *\n * @flow\n */\n\nimport type { Platform } from '../types';\n\nconst spawn = require('child_process').spawn;\nconst path = require('path');\n\ntype ConfigOptions = {\n  root: string,\n  assetsDest: string,\n  dev: boolean,\n  minify: boolean,\n  port: number,\n  platform: Platform,\n};\n\ntype Options = {\n  configPath: string,\n  configOptions: ConfigOptions,\n};\n\nmodule.exports = function createForkProcess(\n  platform: Platform,\n  rootDir: string,\n  address: string,\n  options: Options\n) {\n  const workerPath = path.resolve(rootDir, 'worker/index.js');\n  const child = spawn(process.execPath, ['--trace-warnings', workerPath], {\n    cwd: process.cwd(),\n    env: Object.assign({}, process.env, {\n      HAUL_PLATFORM: platform,\n      HAUL_DIRECTORY: path.join(rootDir, 'worker'),\n      HAUL_OPTIONS: JSON.stringify(options),\n      HAUL_SOCKET_ADDRESS: address,\n    }),\n    stdio: 'pipe',\n  });\n\n  child.stdout.on('data', data => {\n    console.log(data.toString());\n  });\n\n  child.stderr.on('data', data => {\n    console.error(data.toString());\n  });\n\n  child.on('error', error => {\n    throw error;\n  });\n\n  return child;\n};\n"],"file":"createForkProcess.js"}