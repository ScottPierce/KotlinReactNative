"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("util");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _ansiFragments = require("ansi-fragments");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LoggerLevel;

(function (LoggerLevel) {
  LoggerLevel["Debug"] = "debug";
  LoggerLevel["Info"] = "info";
  LoggerLevel["Warn"] = "warn";
  LoggerLevel["Error"] = "error";
  LoggerLevel["Done"] = "done";
})(LoggerLevel || (LoggerLevel = {}));

const levelToPriorityMappings = {
  [LoggerLevel.Debug]: 0,
  [LoggerLevel.Info]: 1,
  [LoggerLevel.Done]: 2,
  [LoggerLevel.Warn]: 3,
  [LoggerLevel.Error]: 4
};
const levelToColorMappings = {
  [LoggerLevel.Info]: 'blue',
  [LoggerLevel.Warn]: 'yellow',
  [LoggerLevel.Error]: 'red',
  [LoggerLevel.Done]: 'green',
  [LoggerLevel.Debug]: 'gray'
};

class Logger {
  constructor() {
    _defineProperty(this, "proxyHandler", void 0);

    _defineProperty(this, "logFile", void 0);

    _defineProperty(this, "logAsJson", false);

    _defineProperty(this, "minLoggingLevel", LoggerLevel.Info);

    _defineProperty(this, "info", this.createLoggingFunction(LoggerLevel.Info));

    _defineProperty(this, "warn", this.createLoggingFunction(LoggerLevel.Warn));

    _defineProperty(this, "error", this.createLoggingFunction(LoggerLevel.Error));

    _defineProperty(this, "done", this.createLoggingFunction(LoggerLevel.Done));

    _defineProperty(this, "debug", this.createLoggingFunction(LoggerLevel.Debug));

    _defineProperty(this, "proxy", handler => {
      this.proxyHandler = handler;
      return () => {
        this.proxyHandler = undefined;
      };
    });

    _defineProperty(this, "print", (...args) => {
      // eslint-disable-next-line no-console
      console.log(...args);
    });

    _defineProperty(this, "enhanceWithColor", (enhancer, ...args) => {
      return (0, _ansiFragments.color)(enhancer, this.stringify(args).join(' ')).build();
    });

    _defineProperty(this, "enhanceWithModifier", (enhancer, ...args) => {
      return (0, _ansiFragments.modifier)(enhancer, this.stringify(args).join(' ')).build();
    });

    _defineProperty(this, "enhanceWithLevel", (level, ...args) => {
      return (0, _ansiFragments.container)((0, _ansiFragments.color)(levelToColorMappings[level], (0, _ansiFragments.modifier)('bold', level)), (0, _ansiFragments.pad)(1), '▶︎', (0, _ansiFragments.pad)(1), this.stringify(args).join(' ')).build();
    });
  }

  /**
   * Enables logging all messages to file as well as to process' STDOUT.
   * If `json` is `true` each log will be in JSON format for easier processing.
   * If relative `filename` is passed, it will be resolved based on process' CWD.
   */
  enableFileLogging(filename, {
    json
  }) {
    const absFilename = _path.default.isAbsolute(filename) ? filename : _path.default.resolve(filename);
    this.logFile = _fs.default.openSync(absFilename, 'a');
    this.logAsJson = json;
  }
  /**
   * Disposes the logger by closing all open handles.
   * If file logging was enabled, the file descriptor will be closed here.
   * Should always be called before exiting from process.
   */


  dispose() {
    if (this.logFile !== undefined) {
      _fs.default.closeSync(this.logFile);
    }
  }

  /**
   * Stringify array of elements into a string array.
   * Uses Node's built-in `util.inspect` function to stringify non-string elements.
   */
  stringify(args) {
    return args.map(item => typeof item === 'string' ? item : (0, _util.inspect)(item, {
      depth: null,
      maxArrayLength: null,
      breakLength: Infinity
    }));
  }

  createLoggingFunction(level) {
    return (...args) => {
      if (this.logFile !== undefined) {
        const rawArgs = this.stringify(args).map(_stripAnsi.default);

        _fs.default.appendFileSync(this.logFile, (this.logAsJson ? (0, _stripAnsi.default)(JSON.stringify({
          timestamp: new Date(),
          level,
          messages: rawArgs
        })) : `[${new Date().toISOString()}] ${level}: ${rawArgs.join(' ')}`) + '\n', 'utf8');
      }

      if (levelToPriorityMappings[level] >= levelToPriorityMappings[this.minLoggingLevel]) {
        if (this.proxyHandler) {
          this.proxyHandler(level, ...args);
        } else {
          this.print(this.enhanceWithLevel(level, ...args));
        }
      }
    };
  }

}

exports.default = Logger;

_defineProperty(Logger, "Level", LoggerLevel);

_defineProperty(Logger, "LevelColorMapping", levelToColorMappings);
//# sourceMappingURL=Logger.js.map