{"version":3,"sources":["../../src/runtime/Logger.ts"],"names":["LoggerLevel","levelToPriorityMappings","Debug","Info","Done","Warn","Error","levelToColorMappings","Logger","createLoggingFunction","handler","proxyHandler","undefined","args","console","log","enhancer","stringify","join","build","level","enableFileLogging","filename","json","absFilename","path","isAbsolute","resolve","logFile","fs","openSync","logAsJson","dispose","closeSync","map","item","depth","maxArrayLength","breakLength","Infinity","rawArgs","stripAnsi","appendFileSync","JSON","timestamp","Date","messages","toISOString","minLoggingLevel","print","enhanceWithLevel"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;IASKA,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAQL,MAAMC,uBAAuB,GAAG;AAC9B,GAACD,WAAW,CAACE,KAAb,GAAqB,CADS;AAE9B,GAACF,WAAW,CAACG,IAAb,GAAoB,CAFU;AAG9B,GAACH,WAAW,CAACI,IAAb,GAAoB,CAHU;AAI9B,GAACJ,WAAW,CAACK,IAAb,GAAoB,CAJU;AAK9B,GAACL,WAAW,CAACM,KAAb,GAAqB;AALS,CAAhC;AAQA,MAAMC,oBAAoB,GAAG;AAC3B,GAACP,WAAW,CAACG,IAAb,GAAoB,MADO;AAE3B,GAACH,WAAW,CAACK,IAAb,GAAoB,QAFO;AAG3B,GAACL,WAAW,CAACM,KAAb,GAAqB,KAHM;AAI3B,GAACN,WAAW,CAACI,IAAb,GAAoB,OAJO;AAK3B,GAACJ,WAAW,CAACE,KAAb,GAAqB;AALM,CAA7B;;AASe,MAAMM,MAAN,CAAa;AAAA;AAAA;;AAAA;;AAAA,uCAMN,KANM;;AAAA,6CAOYR,WAAW,CAACG,IAPxB;;AAAA,kCAiCnB,KAAKM,qBAAL,CAA2BT,WAAW,CAACG,IAAvC,CAjCmB;;AAAA,kCAkCnB,KAAKM,qBAAL,CAA2BT,WAAW,CAACK,IAAvC,CAlCmB;;AAAA,mCAmClB,KAAKI,qBAAL,CAA2BT,WAAW,CAACM,KAAvC,CAnCkB;;AAAA,kCAoCnB,KAAKG,qBAAL,CAA2BT,WAAW,CAACI,IAAvC,CApCmB;;AAAA,mCAqClB,KAAKK,qBAAL,CAA2BT,WAAW,CAACE,KAAvC,CArCkB;;AAAA,mCA4CjBQ,OAAD,IAAyC;AAC/C,WAAKC,YAAL,GAAoBD,OAApB;AACA,aAAO,MAAM;AACX,aAAKC,YAAL,GAAoBC,SAApB;AACD,OAFD;AAGD,KAjDyB;;AAAA,mCAsDlB,CAAC,GAAGC,IAAJ,KAAwB;AAC9B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAGF,IAAf;AACD,KAzDyB;;AAAA,8CA8DP,CAACG,QAAD,EAAsB,GAAGH,IAAzB,KAA6C;AAC9D,aAAO,0BAAMG,QAAN,EAAgB,KAAKC,SAAL,CAAeJ,IAAf,EAAqBK,IAArB,CAA0B,GAA1B,CAAhB,EAAgDC,KAAhD,EAAP;AACD,KAhEyB;;AAAA,iDAqEJ,CAACH,QAAD,EAAyB,GAAGH,IAA5B,KAAgD;AACpE,aAAO,6BAASG,QAAT,EAAmB,KAAKC,SAAL,CAAeJ,IAAf,EAAqBK,IAArB,CAA0B,GAA1B,CAAnB,EAAmDC,KAAnD,EAAP;AACD,KAvEyB;;AAAA,8CA6EP,CAACC,KAAD,EAAqB,GAAGP,IAAxB,KAA4C;AAC7D,aAAO,8BACL,0BAAMN,oBAAoB,CAACa,KAAD,CAA1B,EAAmC,6BAAS,MAAT,EAAiBA,KAAjB,CAAnC,CADK,EAEL,wBAAI,CAAJ,CAFK,EAGL,IAHK,EAIL,wBAAI,CAAJ,CAJK,EAKL,KAAKH,SAAL,CAAeJ,IAAf,EAAqBK,IAArB,CAA0B,GAA1B,CALK,EAMLC,KANK,EAAP;AAOD,KArFyB;AAAA;;AAS1B;;;;;AAKAE,EAAAA,iBAAiB,CAACC,QAAD,EAAmB;AAAEC,IAAAA;AAAF,GAAnB,EAAgD;AAC/D,UAAMC,WAAW,GAAGC,cAAKC,UAAL,CAAgBJ,QAAhB,IAChBA,QADgB,GAEhBG,cAAKE,OAAL,CAAaL,QAAb,CAFJ;AAGA,SAAKM,OAAL,GAAeC,YAAGC,QAAH,CAAYN,WAAZ,EAAyB,GAAzB,CAAf;AACA,SAAKO,SAAL,GAAiBR,IAAjB;AACD;AAED;;;;;;;AAKAS,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKJ,OAAL,KAAiBhB,SAArB,EAAgC;AAC9BiB,kBAAGI,SAAH,CAAa,KAAKL,OAAlB;AACD;AACF;;AAwDD;;;;AAIAX,EAAAA,SAAS,CAACJ,IAAD,EAAc;AACrB,WAAOA,IAAI,CAACqB,GAAL,CAASC,IAAI,IAClB,OAAOA,IAAP,KAAgB,QAAhB,GACIA,IADJ,GAEI,mBAAQA,IAAR,EAAc;AACZC,MAAAA,KAAK,EAAE,IADK;AAEZC,MAAAA,cAAc,EAAE,IAFJ;AAGZC,MAAAA,WAAW,EAAEC;AAHD,KAAd,CAHC,CAAP;AASD;;AAEO9B,EAAAA,qBAAR,CAA8BW,KAA9B,EAAkD;AAChD,WAAO,CAAC,GAAGP,IAAJ,KAAwB;AAC7B,UAAI,KAAKe,OAAL,KAAiBhB,SAArB,EAAgC;AAC9B,cAAM4B,OAAO,GAAG,KAAKvB,SAAL,CAAeJ,IAAf,EAAqBqB,GAArB,CAAyBO,kBAAzB,CAAhB;;AACAZ,oBAAGa,cAAH,CACE,KAAKd,OADP,EAEE,CAAC,KAAKG,SAAL,GACG,wBACEY,IAAI,CAAC1B,SAAL,CAAe;AACb2B,UAAAA,SAAS,EAAE,IAAIC,IAAJ,EADE;AAEbzB,UAAAA,KAFa;AAGb0B,UAAAA,QAAQ,EAAEN;AAHG,SAAf,CADF,CADH,GAQI,IAAG,IAAIK,IAAJ,GAAWE,WAAX,EAAyB,KAAI3B,KAAM,KAAIoB,OAAO,CAACtB,IAAR,CAAa,GAAb,CAAkB,EARjE,IASE,IAXJ,EAYE,MAZF;AAcD;;AAED,UACEjB,uBAAuB,CAACmB,KAAD,CAAvB,IACAnB,uBAAuB,CAAC,KAAK+C,eAAN,CAFzB,EAGE;AACA,YAAI,KAAKrC,YAAT,EAAuB;AACrB,eAAKA,YAAL,CAAkBS,KAAlB,EAAyB,GAAGP,IAA5B;AACD,SAFD,MAEO;AACL,eAAKoC,KAAL,CAAW,KAAKC,gBAAL,CAAsB9B,KAAtB,EAA6B,GAAGP,IAAhC,CAAX;AACD;AACF;AACF,KA7BD;AA8BD;;AAtIyB;;;;gBAAPL,M,WACJR,W;;gBADIQ,M,uBAEQD,oB","sourcesContent":["import { inspect } from 'util';\nimport fs from 'fs';\nimport path from 'path';\nimport stripAnsi from 'strip-ansi';\nimport {\n  container,\n  color,\n  modifier,\n  pad,\n  AnsiColor,\n  AnsiModifier,\n} from 'ansi-fragments';\n\nenum LoggerLevel {\n  Debug = 'debug',\n  Info = 'info',\n  Warn = 'warn',\n  Error = 'error',\n  Done = 'done',\n}\n\nconst levelToPriorityMappings = {\n  [LoggerLevel.Debug]: 0,\n  [LoggerLevel.Info]: 1,\n  [LoggerLevel.Done]: 2,\n  [LoggerLevel.Warn]: 3,\n  [LoggerLevel.Error]: 4,\n};\n\nconst levelToColorMappings = {\n  [LoggerLevel.Info]: 'blue' as AnsiColor,\n  [LoggerLevel.Warn]: 'yellow' as AnsiColor,\n  [LoggerLevel.Error]: 'red' as AnsiColor,\n  [LoggerLevel.Done]: 'green' as AnsiColor,\n  [LoggerLevel.Debug]: 'gray' as AnsiColor,\n};\n\ntype ProxyHandler = (level: LoggerLevel, ...args: unknown[]) => void;\nexport default class Logger {\n  static Level = LoggerLevel;\n  static LevelColorMapping = levelToColorMappings;\n\n  private proxyHandler: ProxyHandler | undefined;\n  private logFile: number | undefined;\n  private logAsJson = false;\n  public minLoggingLevel: LoggerLevel = LoggerLevel.Info;\n\n  /**\n   * Enables logging all messages to file as well as to process' STDOUT.\n   * If `json` is `true` each log will be in JSON format for easier processing.\n   * If relative `filename` is passed, it will be resolved based on process' CWD.\n   */\n  enableFileLogging(filename: string, { json }: { json: boolean }) {\n    const absFilename = path.isAbsolute(filename)\n      ? filename\n      : path.resolve(filename);\n    this.logFile = fs.openSync(absFilename, 'a');\n    this.logAsJson = json;\n  }\n\n  /**\n   * Disposes the logger by closing all open handles.\n   * If file logging was enabled, the file descriptor will be closed here.\n   * Should always be called before exiting from process.\n   */\n  dispose() {\n    if (this.logFile !== undefined) {\n      fs.closeSync(this.logFile);\n    }\n  }\n\n  info = this.createLoggingFunction(LoggerLevel.Info);\n  warn = this.createLoggingFunction(LoggerLevel.Warn);\n  error = this.createLoggingFunction(LoggerLevel.Error);\n  done = this.createLoggingFunction(LoggerLevel.Done);\n  debug = this.createLoggingFunction(LoggerLevel.Debug);\n\n  /**\n   * Enables proxy for all logs.\n   * Messages will be passed to `handler` function and __won't be logged__ to process' STDOUT.\n   * Returns a dispose function to disable the proxy.\n   */\n  proxy = (handler: ProxyHandler): (() => void) => {\n    this.proxyHandler = handler;\n    return () => {\n      this.proxyHandler = undefined;\n    };\n  };\n\n  /**\n   * Prints arguments _as is_ without any processing.\n   */\n  print = (...args: unknown[]) => {\n    // eslint-disable-next-line no-console\n    console.log(...args);\n  };\n\n  /**\n   * Enhances given arguments with ANSI color.\n   */\n  enhanceWithColor = (enhancer: AnsiColor, ...args: unknown[]) => {\n    return color(enhancer, this.stringify(args).join(' ')).build();\n  };\n\n  /**\n   * Enhances given arguments with ANSI modifier, for example with `bold`, `italic` etc.\n   */\n  enhanceWithModifier = (enhancer: AnsiModifier, ...args: unknown[]) => {\n    return modifier(enhancer, this.stringify(args).join(' ')).build();\n  };\n\n  /**\n   * Enhances given arguments with level prefix.\n   * Example: info ▶︎ argument1 argument2\n   */\n  enhanceWithLevel = (level: LoggerLevel, ...args: unknown[]) => {\n    return container(\n      color(levelToColorMappings[level], modifier('bold', level)),\n      pad(1),\n      '▶︎',\n      pad(1),\n      this.stringify(args).join(' ')\n    ).build();\n  };\n\n  /**\n   * Stringify array of elements into a string array.\n   * Uses Node's built-in `util.inspect` function to stringify non-string elements.\n   */\n  stringify(args: any[]) {\n    return args.map(item =>\n      typeof item === 'string'\n        ? item\n        : inspect(item, {\n            depth: null,\n            maxArrayLength: null,\n            breakLength: Infinity,\n          })\n    );\n  }\n\n  private createLoggingFunction(level: LoggerLevel) {\n    return (...args: unknown[]) => {\n      if (this.logFile !== undefined) {\n        const rawArgs = this.stringify(args).map(stripAnsi);\n        fs.appendFileSync(\n          this.logFile,\n          (this.logAsJson\n            ? stripAnsi(\n                JSON.stringify({\n                  timestamp: new Date(),\n                  level,\n                  messages: rawArgs,\n                })\n              )\n            : `[${new Date().toISOString()}] ${level}: ${rawArgs.join(' ')}`) +\n            '\\n',\n          'utf8'\n        );\n      }\n\n      if (\n        levelToPriorityMappings[level] >=\n        levelToPriorityMappings[this.minLoggingLevel]\n      ) {\n        if (this.proxyHandler) {\n          this.proxyHandler(level, ...args);\n        } else {\n          this.print(this.enhanceWithLevel(level, ...args));\n        }\n      }\n    };\n  }\n}\n"],"file":"Logger.js"}