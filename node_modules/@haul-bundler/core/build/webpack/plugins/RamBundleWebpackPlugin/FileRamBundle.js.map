{"version":3,"sources":["../../../../src/webpack/plugins/RamBundleWebpackPlugin/FileRamBundle.ts"],"names":["FileRamBundle","constructor","bootstrap","modules","sourceMap","bundleName","singleBundleMode","build","outputDest","outputFilename","sourceMapFilename","compilation","jsModulesDir","path","join","dirname","UNBUNDLE","Buffer","alloc","writeUInt32LE","MAGIC_NUMBER","assets","RawSource","forEach","webpackModule","intId","id","idx","source","indexMap","version","file","sections","sourceModule","index","push","offset","line","column","map","JSON","stringify"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAGe,MAAMA,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CACFC,SADE,EAEFC,OAFE,EAGFC,SAHE,EAIFC,UAJE,EAKFC,gBALE,EAMT;AAAA,SALOJ,SAKP,GALOA,SAKP;AAAA,SAJOC,OAIP,GAJOA,OAIP;AAAA,SAHOC,SAGP,GAHOA,SAGP;AAAA,SAFOC,UAEP,GAFOA,UAEP;AAAA,SADOC,gBACP,GADOA,gBACP;AAAE;;AAEJC,EAAAA,KAAK,CAAC;AACJC,IAAAA,UADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,iBAHI;AAIJC,IAAAA;AAJI,GAAD,EAUF;AACD,UAAMC,YAAY,GAAG,KAAKN,gBAAL,GACjBO,cAAKC,IAAL,CAAUD,cAAKE,OAAL,CAAaN,cAAb,CAAV,EAAwC,YAAxC,CADiB,GAEjBI,cAAKC,IAAL,CACED,cAAKE,OAAL,CAAaN,cAAb,CADF,EAEG,GAAE,KAAKJ,UAAW,aAFrB,CAFJ,CADC,CAOD;;AACA,UAAMW,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAjB;AACAF,IAAAA,QAAQ,CAACG,aAAT,CAAuBC,oBAAvB,EAAqC,CAArC,EATC,CAWD;AACA;;AACAT,IAAAA,WAAW,CAACU,MAAZ,CAAmBZ,cAAnB,IAAqC,IAAIa,yBAAJ,CAAc,KAAKpB,SAAnB,CAArC,CAbC,CAcD;AACA;;AACAS,IAAAA,WAAW,CAACU,MAAZ,CAAmBR,cAAKC,IAAL,CAAUF,YAAV,EAAwB,UAAxB,CAAnB,IAA0D,IAAIU,yBAAJ,CACxDN,QADwD,CAA1D,CAhBC,CAoBD;;AACA,SAAKb,OAAL,CAAaoB,OAAb,CAAqBC,aAAa,IAAI;AACpC,YAAMC,KAAK,GACT,OAAOD,aAAa,CAACE,EAArB,KAA4B,QAA5B,GACIF,aAAa,CAACG,GADlB,GAEIH,aAAa,CAACE,EAHpB;AAIAf,MAAAA,WAAW,CAACU,MAAZ,CACER,cAAKC,IAAL,CAAUF,YAAV,EAAyB,GAAEa,KAAM,KAAjC,CADF,IAEI,IAAIH,yBAAJ,CAAcE,aAAa,CAACI,MAA5B,CAFJ;AAGD,KARD;;AAUA,QAAI,KAAKxB,SAAT,EAAoB;AAClB,YAAMyB,QAAQ,GAAG;AACfC,QAAAA,OAAO,EAAE,CADM;AAEfC,QAAAA,IAAI,EAAEvB,UAFS;AAGfwB,QAAAA,QAAQ,EAAE;AAHK,OAAjB;AAQA,WAAK7B,OAAL,CAAaoB,OAAb,CAAqB,CAACU,YAAD,EAAeC,KAAf,KAAyB;AAC5CL,QAAAA,QAAQ,CAACG,QAAT,CAAkBG,IAAlB,CAAuB;AACrBC,UAAAA,MAAM,EAAE;AACNC,YAAAA,IAAI,EAAEH,KADA;AAENI,YAAAA,MAAM,EAAE;AAFF,WADa;AAKrBC,UAAAA,GAAG,EAAEN,YAAY,CAACM;AALG,SAAvB;AAOD,OARD;AAUA5B,MAAAA,WAAW,CAACU,MAAZ,CAAmBX,iBAAnB,IAAwC,IAAIY,yBAAJ,CACtCkB,IAAI,CAACC,SAAL,CAAeZ,QAAf,CADsC,CAAxC;AAGD;AACF;;AAzEgC","sourcesContent":["import webpack from 'webpack';\nimport path from 'path';\nimport { RawSource } from 'webpack-sources';\nimport MAGIC_NUMBER from 'metro/src/shared/output/RamBundle/magic-number';\nimport { Module } from './RamBundleWebpackPlugin';\n\nexport default class FileRamBundle {\n  constructor(\n    public bootstrap: string,\n    public modules: Module[],\n    public sourceMap: boolean,\n    public bundleName: string,\n    public singleBundleMode: boolean\n  ) {}\n\n  build({\n    outputDest,\n    outputFilename,\n    sourceMapFilename,\n    compilation,\n  }: {\n    outputDest: string;\n    outputFilename: string;\n    sourceMapFilename: string;\n    compilation: webpack.compilation.Compilation;\n  }) {\n    const jsModulesDir = this.singleBundleMode\n      ? path.join(path.dirname(outputFilename), 'js-modules')\n      : path.join(\n          path.dirname(outputFilename),\n          `${this.bundleName}-js-modules`\n        );\n    // UNBUNDLE file tells React Native it's a RAM bundle.\n    const UNBUNDLE = Buffer.alloc(4);\n    UNBUNDLE.writeUInt32LE(MAGIC_NUMBER, 0);\n\n    // Bundle file contains only bootstrap code. Modules are stored in `js-modules`\n    // in the same directory as bundle file.\n    compilation.assets[outputFilename] = new RawSource(this.bootstrap);\n    // Cast buffer to any to avoid mismatch of types. RawSource works not only on strings\n    // but also on Buffers.\n    compilation.assets[path.join(jsModulesDir, 'UNBUNDLE')] = new RawSource(\n      UNBUNDLE as any\n    );\n\n    // Emit JS modules\n    this.modules.forEach(webpackModule => {\n      const intId =\n        typeof webpackModule.id === 'string'\n          ? webpackModule.idx\n          : webpackModule.id;\n      compilation.assets[\n        path.join(jsModulesDir, `${intId}.js`)\n      ] = new RawSource(webpackModule.source);\n    });\n\n    if (this.sourceMap) {\n      const indexMap = {\n        version: 3,\n        file: outputDest,\n        sections: [] as Array<{\n          offset: { line: number; column: number };\n          map: Object;\n        }>,\n      };\n      this.modules.forEach((sourceModule, index) => {\n        indexMap.sections.push({\n          offset: {\n            line: index,\n            column: 0,\n          },\n          map: sourceModule.map,\n        });\n      });\n\n      compilation.assets[sourceMapFilename] = new RawSource(\n        JSON.stringify(indexMap)\n      );\n    }\n  }\n}\n"],"file":"FileRamBundle.js"}