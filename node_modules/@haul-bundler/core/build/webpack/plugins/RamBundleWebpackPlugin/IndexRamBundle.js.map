{"version":3,"sources":["../../../../src/webpack/plugins/RamBundleWebpackPlugin/IndexRamBundle.ts"],"names":["NULL_TERMINATOR","Buffer","alloc","fill","UNIT32_SIZE","IndexRamBundle","constructor","bootstrap","modules","sourceMap","toNullTerminatedBuffer","rawModules","map","m","id","idx","buffer","source","header","writeUInt32LE","MAGIC_NUMBER","body","concat","from","encoding","getOffset","n","buildToc","maxModuleId","Math","max","entriesLength","table","length","codeOffset","forEach","moduleBuffer","offset","toc","build","outputDest","outputFilename","sourceMapFilename","compilation","bundle","assets","RawSource","indexMap","version","file","sections","sourceModule","index","push","line","column","JSON","stringify"],"mappings":"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","sourcesContent":["import MAGIC_NUMBER from 'metro/src/shared/output/RamBundle/magic-number';\nimport webpack from 'webpack';\nimport { RawSource } from 'webpack-sources';\nimport { Module } from './RamBundleWebpackPlugin';\n\n/***\n * Reference: https://github.com/facebook/metro/blob/master/packages/metro/src/shared/output/RamBundle/as-indexed-file.js\n */\n\nconst NULL_TERMINATOR = Buffer.alloc(1).fill(0);\nconst UNIT32_SIZE = 4;\n\ntype ModuleBuffer = {\n  id: number;\n  buffer: Buffer;\n};\n\nexport default class IndexRamBundle {\n  encoding: 'ascii' | 'utf16le' | 'utf8' = 'utf8';\n  header: Buffer = Buffer.alloc(4);\n  bootstrap: Buffer = Buffer.alloc(0);\n  toc: Buffer = Buffer.alloc(0);\n  modules: ModuleBuffer[] = [];\n  rawModules: Module[] = [];\n\n  constructor(\n    bootstrap: string,\n    modules: Module[],\n    public sourceMap: boolean = false\n  ) {\n    this.bootstrap = this.toNullTerminatedBuffer(bootstrap);\n    this.rawModules = modules;\n    this.modules = modules.map(m => ({\n      id: typeof m.id === 'string' ? m.idx : m.id,\n      buffer: this.toNullTerminatedBuffer(m.source),\n    }));\n    this.header.writeUInt32LE(MAGIC_NUMBER, 0);\n  }\n\n  private toNullTerminatedBuffer(body: string) {\n    return Buffer.concat([Buffer.from(body, this.encoding), NULL_TERMINATOR]);\n  }\n\n  private getOffset(n: number) {\n    return (2 + n * 2) * UNIT32_SIZE;\n  }\n\n  private buildToc() {\n    const maxModuleId = Math.max(...this.modules.map(m => m.id));\n    const entriesLength = maxModuleId + 1;\n    const table = Buffer.alloc(this.getOffset(entriesLength)).fill(0);\n\n    table.writeUInt32LE(entriesLength, 0);\n    table.writeUInt32LE(this.bootstrap.length, UNIT32_SIZE);\n\n    let codeOffset = this.bootstrap.length;\n    this.modules.forEach(moduleBuffer => {\n      const offset = this.getOffset(moduleBuffer.id);\n      table.writeUInt32LE(codeOffset, offset);\n      table.writeUInt32LE(moduleBuffer.buffer.length, offset + UNIT32_SIZE);\n      codeOffset += moduleBuffer.buffer.length;\n    });\n\n    this.toc = table;\n  }\n\n  build({\n    outputDest,\n    outputFilename,\n    sourceMapFilename,\n    compilation,\n  }: {\n    outputDest: string;\n    outputFilename: string;\n    sourceMapFilename: string;\n    compilation: webpack.compilation.Compilation;\n  }) {\n    this.buildToc();\n\n    const bundle = Buffer.concat(\n      [this.header, this.toc, this.bootstrap].concat(\n        this.modules.map(m => m.buffer)\n      )\n    );\n\n    // Cast buffer to any to avoid mismatch of types. RawSource works not only on strings\n    // but also on Buffers.\n    compilation.assets[outputFilename] = new RawSource(bundle as any);\n\n    if (this.sourceMap) {\n      const indexMap = {\n        version: 3,\n        file: outputDest,\n        sections: [] as Array<{\n          offset: { line: number; column: number };\n          map: Object;\n        }>,\n      };\n\n      this.rawModules.forEach((sourceModule, index) => {\n        indexMap.sections.push({\n          offset: {\n            line: index,\n            column: 0,\n          },\n          map: sourceModule.map,\n        });\n      });\n\n      compilation.assets[sourceMapFilename] = new RawSource(\n        JSON.stringify(indexMap)\n      );\n    }\n  }\n}\n"],"file":"IndexRamBundle.js"}