{"version":3,"sources":["../../../../src/webpack/plugins/RamBundleWebpackPlugin/RamBundleWebpackPlugin.ts"],"names":["variableToString","value","undefined","toString","hasValue","RamBundleWebpackPlugin","constructor","sourceMap","indexRamBundle","preloadBundles","singleBundleMode","minify","minifyOptions","maxWorkers","bundleId","bundleName","Boolean","apply","compiler","hooks","emit","tapPromise","_compilation","compilation","moduleMappings","modules","chunks","mainId","mainChunk","forEach","chunk","id","name","entryModule","getModules","moduleInChunk","concat","length","Error","minifyWorker","Worker","require","resolve","numWorkers","enableWorkerThreads","Promise","all","map","webpackModule","renderedModule","moduleTemplates","javascript","render","dependencyTemplates","options","sourceAndMap","index","code","source","minifyOptionsWithMap","content","minifiedSource","error","JSON","parse","idx","filename","resource","file","end","indent","line","bootstrap","fs","readFileSync","path","join","__dirname","trim","mainModuleId","preloadBundleNames","depth","maxArrayLength","breakLength","Infinity","split","renderWithEntryResults","mainTemplate","renderWithEntry","call","hash","terser","outputFilename","outputOptions","outputDest","isAbsolute","sourceMapFilename","getPath","relative","context","bundle","IndexRamBundle","FileRamBundle","filesToRemove","reduce","acc","files","Object","keys","assets","assetName","remove","some","endsWith","build"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { inspect } from 'util';\nimport webpack from 'webpack';\nimport terser, { MinifyOptions } from 'terser';\nimport Worker from 'jest-worker';\n\nimport IndexRamBundle from './IndexRamBundle';\nimport FileRamBundle from './FileRamBundle';\n\nexport type Module = {\n  id: string | number;\n  idx: number;\n  filename: string;\n  source: string;\n  map: Object;\n};\n\ntype Compilation = webpack.compilation.Compilation & {\n  moduleTemplate: any;\n  options: webpack.Configuration;\n  mainTemplate: webpack.compilation.MainTemplate & {\n    renderBootstrap: Function;\n    hooks: webpack.compilation.CompilationHooks & {\n      renderWithEntry: { call: Function };\n    };\n  };\n  moduleTemplates: {\n    javascript: webpack.compilation.ModuleTemplate & {\n      render: Function;\n    };\n  };\n};\n\ntype ModuleMappings = {\n  modules: { [key: string]: number };\n  chunks: { [key: string]: Array<number | string> };\n};\n\ntype RamBundleWebpackPluginOptions = {\n  singleBundleMode?: boolean;\n  sourceMap?: boolean;\n  indexRamBundle?: boolean;\n  preloadBundles?: string[];\n  minify?: boolean;\n  minifyOptions?: Pick<\n    MinifyOptions,\n    Exclude<keyof MinifyOptions, 'sourceMap'>\n  >;\n  maxWorkers: number;\n  bundleId: number | string;\n  bundleName: string;\n};\n\nconst variableToString = (value?: string | number) => {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return typeof value === 'string' ? `\"${value}\"` : value.toString();\n};\n\nconst hasValue = (value: any): boolean =>\n  typeof value === 'undefined' ? false : true;\n\nexport default class RamBundleWebpackPlugin {\n  name = 'RamBundleWebpackPlugin';\n\n  modules: Module[] = [];\n  sourceMap: boolean = false;\n  indexRamBundle: boolean = true;\n  preloadBundles: string[];\n  bundleId: number | string = 'index';\n  bundleName: string = 'index';\n  singleBundleMode: boolean = true;\n  minify: boolean = false;\n  minifyOptions: RamBundleWebpackPluginOptions['minifyOptions'] = undefined;\n  maxWorkers: number;\n\n  constructor({\n    sourceMap,\n    indexRamBundle,\n    preloadBundles,\n    singleBundleMode,\n    minify,\n    minifyOptions,\n    maxWorkers,\n    bundleId,\n    bundleName,\n  }: RamBundleWebpackPluginOptions) {\n    this.sourceMap = Boolean(sourceMap);\n    this.indexRamBundle = Boolean(indexRamBundle);\n    this.preloadBundles = preloadBundles || [];\n    this.singleBundleMode = hasValue(singleBundleMode)\n      ? Boolean(singleBundleMode)\n      : this.singleBundleMode;\n    this.minify = hasValue(minify) ? Boolean(minify) : this.minify;\n    this.minifyOptions = minifyOptions;\n    this.maxWorkers = maxWorkers;\n    this.bundleId = bundleId;\n    this.bundleName = bundleName;\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.emit.tapPromise(\n      'RamBundleWebpackPlugin',\n      async _compilation => {\n        // Cast compilation from @types/webpack to custom Compilation type\n        // which contains additional properties.\n        const compilation: Compilation = _compilation as any;\n\n        const moduleMappings: ModuleMappings = {\n          modules: {},\n          chunks: {},\n        };\n\n        let mainId: string | number | undefined;\n        let mainChunk: webpack.compilation.Chunk | undefined;\n\n        (compilation.chunks as webpack.compilation.Chunk[]).forEach(chunk => {\n          if ((chunk.id as any) === 'main' || chunk.name === 'main') {\n            mainChunk = chunk;\n            mainId = chunk.entryModule?.id ?? undefined;\n          }\n\n          chunk.getModules().forEach(moduleInChunk => {\n            if (chunk.id !== null) {\n              moduleMappings.chunks[chunk.id] = ([] as Array<string | number>)\n                .concat(...(moduleMappings.chunks[chunk.id] || []))\n                .concat(moduleInChunk.id ?? []);\n            }\n          });\n        });\n\n        // Omit chunks mapping if there's only a single main chunk\n        if (compilation.chunks.length === 1) {\n          moduleMappings.chunks = {};\n        }\n\n        if (mainId === undefined) {\n          throw new Error(\n            \"RamBundleWebpackPlugin: couldn't find main chunk's entry module id\"\n          );\n        }\n        if (!mainChunk) {\n          throw new Error(\"RamBundleWebpackPlugin: couldn't find main chunk\");\n        }\n        // Render modules to it's 'final' form with injected webpack variables\n        // and wrapped with ModuleTemplate.\n        const minifyWorker = new Worker(\n          require.resolve(\n            '../../../../build/webpack/plugins/RamBundleWebpackPlugin/worker'\n          ),\n          {\n            numWorkers: this.maxWorkers,\n            enableWorkerThreads: true,\n          }\n        );\n\n        this.modules = await Promise.all(\n          compilation.modules.map(async webpackModule => {\n            const renderedModule = compilation.moduleTemplates.javascript\n              .render(\n                webpackModule,\n                compilation.dependencyTemplates,\n                compilation.options\n              )\n              .sourceAndMap();\n\n            if (typeof webpackModule.id === 'string') {\n              moduleMappings.modules[webpackModule.id] = webpackModule.index;\n            }\n\n            let code = `__haul_${this.bundleName}.l(${variableToString(\n              webpackModule.id\n            )}, ${renderedModule.source});`;\n            let map = renderedModule.map;\n\n            if (this.minify) {\n              const minifyOptionsWithMap = {\n                ...this.minifyOptions,\n                sourceMap: {\n                  content: map,\n                },\n              };\n              // @ts-ignore property minify does not exist on type 'JestWorker'\n              const minifiedSource = await minifyWorker.minify(\n                code,\n                minifyOptionsWithMap\n              );\n              //Check if there is no error in minifed source\n              assert(!minifiedSource.error, minifiedSource.error);\n\n              code = minifiedSource.code || '';\n              if (typeof minifiedSource.map === 'string') {\n                map = JSON.parse(minifiedSource.map);\n              }\n            }\n\n            return {\n              id: webpackModule.id,\n              idx: webpackModule.index,\n              filename: webpackModule.resource,\n              source: code,\n              map: {\n                ...map,\n                file: `${\n                  typeof webpackModule.id === 'string'\n                    ? webpackModule.index\n                    : webpackModule.id\n                }.js`,\n              },\n            };\n          })\n        );\n\n        minifyWorker.end();\n\n        const indent = (line: string) => `/*****/  ${line}`;\n        let bootstrap = fs.readFileSync(\n          path.join(\n            __dirname,\n            '../../../../runtime/webpack/plugin/ram-bundle-webpack-plugin/bootstrap.js'\n          ),\n          'utf8'\n        );\n        if (typeof this.bundleName !== 'string' || !this.bundleName.length) {\n          throw new Error(\n            'RamBundleWebpackPlugin: bundle name cannot be empty string'\n          );\n        }\n\n        bootstrap =\n          `(${bootstrap.trim()})(this, ${inspect(\n            {\n              bundleName: this.bundleName,\n              bundleId: this.bundleId,\n              mainModuleId: mainId,\n              preloadBundleNames: this.preloadBundles,\n              singleBundleMode: this.singleBundleMode,\n              moduleMappings,\n            },\n            {\n              depth: null,\n              maxArrayLength: null,\n              breakLength: Infinity,\n            }\n          )});`\n            .split('\\n')\n            .map(indent)\n            .join('\\n') + '\\n';\n\n        // Enhance bootstrapCode with additional JS from plugins that hook\n        // into `renderWithEntry` for example: webpack's `library` is used here to expose\n        // bundle as a library.\n        const renderWithEntryResults = compilation.mainTemplate.hooks.renderWithEntry.call(\n          bootstrap,\n          mainChunk,\n          mainChunk.hash\n        );\n        if (typeof renderWithEntryResults === 'string') {\n          bootstrap = renderWithEntryResults;\n        } else if ('source' in renderWithEntryResults) {\n          bootstrap = renderWithEntryResults.source();\n        }\n\n        if (this.minify) {\n          const { error, code } = terser.minify(bootstrap);\n          if (error) {\n            throw error;\n          }\n          bootstrap = code || '';\n        }\n\n        const outputFilename = compilation.outputOptions.filename!;\n        const outputDest = path.isAbsolute(outputFilename)\n          ? outputFilename\n          : path.join(compilation.outputOptions.path, outputFilename);\n\n        const sourceMapFilename = compilation.getPath(\n          compilation.outputOptions.sourceMapFilename,\n          {\n            filename: path.isAbsolute(outputFilename)\n              ? path.relative(compilation.context, outputFilename)\n              : outputFilename,\n          }\n        );\n\n        const bundle = this.indexRamBundle\n          ? new IndexRamBundle(bootstrap, this.modules, this.sourceMap)\n          : new FileRamBundle(\n              bootstrap,\n              this.modules,\n              this.sourceMap,\n              this.bundleName,\n              this.singleBundleMode\n            );\n\n        const filesToRemove: string[] = compilation.chunks.reduce(\n          (acc, chunk) => {\n            if (chunk.name !== 'main') {\n              return [...acc, ...chunk.files];\n            }\n            return acc;\n          },\n          []\n        );\n        Object.keys(compilation.assets).forEach(assetName => {\n          const remove = filesToRemove.some(file => assetName.endsWith(file));\n          if (remove) {\n            delete compilation.assets[assetName];\n          }\n        });\n\n        bundle.build({\n          outputDest,\n          outputFilename,\n          sourceMapFilename,\n          compilation,\n        });\n      }\n    );\n  }\n}\n"],"file":"RamBundleWebpackPlugin.js"}