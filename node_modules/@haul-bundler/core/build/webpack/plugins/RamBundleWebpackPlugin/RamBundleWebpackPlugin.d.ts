import webpack from 'webpack';
import { MinifyOptions } from 'terser';
export declare type Module = {
    id: string | number;
    idx: number;
    filename: string;
    source: string;
    map: Object;
};
declare type RamBundleWebpackPluginOptions = {
    singleBundleMode?: boolean;
    sourceMap?: boolean;
    indexRamBundle?: boolean;
    preloadBundles?: string[];
    minify?: boolean;
    minifyOptions?: Pick<MinifyOptions, Exclude<keyof MinifyOptions, 'sourceMap'>>;
    maxWorkers: number;
    bundleId: number | string;
    bundleName: string;
};
export default class RamBundleWebpackPlugin {
    name: string;
    modules: Module[];
    sourceMap: boolean;
    indexRamBundle: boolean;
    preloadBundles: string[];
    bundleId: number | string;
    bundleName: string;
    singleBundleMode: boolean;
    minify: boolean;
    minifyOptions: RamBundleWebpackPluginOptions['minifyOptions'];
    maxWorkers: number;
    constructor({ sourceMap, indexRamBundle, preloadBundles, singleBundleMode, minify, minifyOptions, maxWorkers, bundleId, bundleName, }: RamBundleWebpackPluginOptions);
    apply(compiler: webpack.Compiler): void;
}
export {};
//# sourceMappingURL=RamBundleWebpackPlugin.d.ts.map