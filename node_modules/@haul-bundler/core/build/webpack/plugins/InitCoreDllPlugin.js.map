{"version":3,"sources":["../../../src/webpack/plugins/InitCoreDllPlugin.ts"],"names":["InitCoreDllModule","DllModule","constructor","context","dependencies","name","type","getInitCoreSource","source","RawSource","InitCoreDllModuleFactory","DllModuleFactory","create","data","callback","dependency","InitCoreDllPlugin","setupFiles","apply","compiler","hooks","beforeRun","tapPromise","resolver","ResolverFactory","createResolver","options","resolve","fileSystem","inputFileSystem","resolvedSetupFiles","Promise","all","map","setupFile","reject","error","resolved","compilation","intercept","register","tap","fn","args","initCoreDllModuleFactory","setupFilesModulesIds","modules","reduce","acc","webpackModule","some","resource","id","setupCode","filter","resolvedSetupFile","JSON","stringify","join","dependencyFactories","set","DllEntryDependency"],"mappings":"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","sourcesContent":["import DllEntryDependency from 'webpack/lib/dependencies/DllEntryDependency';\nimport DllModuleFactory from 'webpack/lib/DllModuleFactory';\nimport DllModule from 'webpack/lib/DllModule';\nimport { RawSource } from 'webpack-sources';\nimport webpack from 'webpack';\nimport { ResolverFactory } from 'enhanced-resolve';\n\nclass InitCoreDllModule extends DllModule {\n  constructor(\n    context: unknown,\n    dependencies: unknown,\n    name: unknown,\n    type: unknown,\n    private getInitCoreSource: () => string\n  ) {\n    super(context, dependencies, name, type);\n  }\n\n  source() {\n    return new RawSource(\n      `${this.getInitCoreSource()}\\nmodule.exports = __webpack_require__;`\n    );\n  }\n}\n\nclass InitCoreDllModuleFactory extends DllModuleFactory {\n  constructor(private getInitCoreSource: () => string) {\n    super();\n  }\n\n  create(\n    data: {\n      dependencies: Array<{ dependencies: []; name: unknown; type: unknown }>;\n      context: unknown;\n    },\n    callback: (error: Error | null, value: any) => void\n  ) {\n    const dependency = data.dependencies[0];\n    callback(\n      null,\n      new InitCoreDllModule(\n        data.context,\n        dependency.dependencies,\n        dependency.name,\n        dependency.type,\n        this.getInitCoreSource\n      )\n    );\n  }\n}\n\nexport default class InitCoreDllPlugin {\n  private setupFiles: string[] = [];\n  private resolvedSetupFiles: string[] = [];\n\n  constructor({ setupFiles }: { setupFiles: string[] }) {\n    this.setupFiles = setupFiles;\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.beforeRun.tapPromise('InitCoreDllPlugin', async compiler => {\n      const resolver = ResolverFactory.createResolver({\n        ...compiler.options.resolve,\n        fileSystem: compiler.inputFileSystem,\n      } as ResolverFactory.ResolverOption);\n      this.resolvedSetupFiles = await Promise.all(\n        this.setupFiles.map(\n          async setupFile =>\n            new Promise<string>((resolve, reject) => {\n              resolver.resolve(\n                {},\n                compiler.context,\n                setupFile,\n                (error, resolved) => {\n                  if (error) {\n                    reject(error);\n                  } else {\n                    resolve(resolved);\n                  }\n                }\n              );\n            })\n        )\n      );\n    });\n\n    compiler.hooks.compilation.intercept({\n      register: tap => {\n        // Intercept tap from DllEntryPlugin in order to modify it.\n        // The modified tap function, will call original DllEntryPlugin tap function,\n        // and then overwrite the DllEntryDependency value in compilation.dependencyFactories\n        // with custom one.\n        if (tap.name === 'DllEntryPlugin') {\n          return {\n            ...tap,\n            fn: (\n              compilation: webpack.compilation.Compilation,\n              ...args: any[]\n            ) => {\n              tap.fn(compilation, ...args);\n              const initCoreDllModuleFactory = new InitCoreDllModuleFactory(\n                () => {\n                  const setupFilesModulesIds = compilation.modules.reduce(\n                    (acc, webpackModule) => {\n                      if (\n                        this.resolvedSetupFiles.some(\n                          setupFile => webpackModule.resource === setupFile\n                        )\n                      ) {\n                        return {\n                          ...acc,\n                          [webpackModule.resource]: webpackModule.id,\n                        };\n                      }\n\n                      return acc;\n                    },\n                    {}\n                  );\n\n                  const setupCode = this.resolvedSetupFiles\n                    .filter(\n                      resolvedSetupFile =>\n                        setupFilesModulesIds[resolvedSetupFile]\n                    )\n                    .map(\n                      resolvedSetupFile =>\n                        `__webpack_require__(${JSON.stringify(\n                          setupFilesModulesIds[resolvedSetupFile]\n                        )});`\n                    )\n                    .join('\\n');\n                  return setupCode;\n                }\n              );\n              compilation.dependencyFactories.set(\n                DllEntryDependency as any,\n                initCoreDllModuleFactory as any\n              );\n            },\n          };\n        }\n        return tap;\n      },\n    });\n  }\n}\n"],"file":"InitCoreDllPlugin.js"}