{"version":3,"sources":["../../../../src/webpack/loaders/babelWorkerLoader/babelWorkerLoader.ts"],"names":["makeLoader","worker","end","source","inputSourceMap","maxWorkers","options","loaderUtils","getOptions","undefined","Worker","require","resolve","numWorkers","enableWorkerThreads","callback","async","sourceMap","result","process","resourcePath","then","args","err","custom"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,UAAT,GAAsB;AACpB,MAAIC,MAAJ;AAEA,2BAAO,YAAY;AAAA;;AACjB,sBAAMA,MAAN,4CAAM,QAAQC,GAAR,EAAN;AACD,GAFD;AAIA,SAAO,gBAA0BC,MAA1B,EAA0CC,cAA1C,EAAkE;AACvE,UAAM;AAAEC,MAAAA,UAAU,GAAG,CAAf;AAAkB,SAAGC;AAArB,QACJC,qBAAYC,UAAZ,CAAuB,IAAvB,KAAgC,EADlC;;AAEA,QAAIP,MAAM,KAAKQ,SAAf,EAA0B;AACxBR,MAAAA,MAAM,GAAG,IAAIS,mBAAJ,CAAWC,OAAO,CAACC,OAAR,CAAgB,UAAhB,CAAX,EAAwC;AAC/CC,QAAAA,UAAU,EAAER,UADmC;AAE/CS,QAAAA,mBAAmB,EAAE;AAF0B,OAAxC,CAAT;AAID,KARsE,CAUvE;;;AACA,UAAMC,QAAQ,GAAG,KAAKC,KAAL,EAAjB;AACA,UAAMC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMC,MAAM,GAAG,MAAMjB,MAAM,CACzB;AADyB,KAExBkB,OAFkB,CAEVhB,MAFU,EAEFC,cAFE,EAEc,KAAKgB,YAFnB,EAEiCd,OAFjC,EAE0CW,SAF1C,EAGlBI,IAHkB,CAIhBC,IAAD,IAAcP,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAG,IAAH,EAAS,GAAGO,IAAZ,CAJL,EAKhBC,GAAD,IAAgBR,QAAhB,aAAgBA,QAAhB,uBAAgBA,QAAQ,CAAGQ,GAAH,CALP,CAArB;AAOA,WAAOL,MAAP;AACD,GArBD;AAsBD;;AAEM,MAAMM,MAAM,GAAGxB,UAAf;;;eACQA,UAAU,E","sourcesContent":["import loaderUtils from 'loader-utils';\nimport Worker from 'jest-worker';\nimport onExit from 'signal-exit';\n\nfunction makeLoader() {\n  let worker: undefined | Worker;\n\n  onExit(async () => {\n    await worker?.end();\n  });\n\n  return async function(this: any, source: string, inputSourceMap: string) {\n    const { maxWorkers = 1, ...options }: { maxWorkers?: number } =\n      loaderUtils.getOptions(this) || {};\n    if (worker === undefined) {\n      worker = new Worker(require.resolve('./worker'), {\n        numWorkers: maxWorkers,\n        enableWorkerThreads: true,\n      });\n    }\n\n    // Make the loader async\n    const callback = this.async();\n    const sourceMap = this.sourceMap;\n    const result = await worker\n      // @ts-ignore\n      .process(source, inputSourceMap, this.resourcePath, options, sourceMap)\n      .then(\n        (args: []) => callback?.(null, ...args),\n        (err: Error) => callback?.(err)\n      );\n    return result;\n  };\n}\n\nexport const custom = makeLoader;\nexport default makeLoader();\n"],"file":"babelWorkerLoader.js"}