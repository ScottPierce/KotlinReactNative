{"version":3,"sources":["../../../../src/webpack/loaders/babelWorkerLoader/worker.ts"],"names":["pkg","require","injectCaller","opts","caller","name","supportsStaticESM","supportsDynamicImport","process","source","inputSourceMap","filename","loaderOptions","sourceMap","sourceMaps","programmaticOptions","undefined","sourceFileName","cacheDirectory","cacheIdentifier","cacheCompression","config","babel","loadPartialConfig","options","result","JSON","stringify","version","code","map"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,0BAAD,CAAnB;;AAEA,MAAMC,YAAY,GAAIC,IAAD,KAGd,EACL,GAAGA,IADE;AAELC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,mBADA;AAENC,IAAAA,iBAAiB,EAAE,IAFb;AAGNC,IAAAA,qBAAqB,EAAE,IAHjB;AAIN,OAAGJ,IAAI,CAACC;AAJF;AAFH,CAHc,CAArB;;AAaO,eAAeI,OAAf,CAELC,MAFK,EAGLC,cAHK,EAILC,QAJK,EAKLC,aALK,EAYLC,SAZK,EAaL;AACA,MAAI,eAAeD,aAAf,IAAgC,EAAE,gBAAgBA,aAAlB,CAApC,EAAsE;AACpEA,IAAAA,aAAa,GAAG,EACd,GAAGA,aADW;AAEdE,MAAAA,UAAU,EAAEF,aAAa,CAACC;AAFZ,KAAhB;AAIA,WAAOD,aAAa,CAACC,SAArB;AACD;;AAED,QAAME,mBAAmB,GAAG,EAC1B,GAAGH,aADuB;AAE1BD,IAAAA,QAF0B;AAG1BD,IAAAA,cAAc,EAAEA,cAAc,IAAIM,SAHR;AAI1BF,IAAAA,UAAU,EACRF,aAAa,CAACE,UAAd,KAA6BE,SAA7B,GACIH,SADJ,GAEID,aAAa,CAACE,UAPM;AAQ1BG,IAAAA,cAAc,EAAEN;AARU,GAA5B,CATA,CAoBA;;AACA,SAAOI,mBAAmB,CAACG,cAA3B;AACA,SAAOH,mBAAmB,CAACI,eAA3B;AACA,SAAOJ,mBAAmB,CAACK,gBAA3B;AAEA,QAAMC,MAAM,GAAGC,KAAK,CAAEC,iBAAP,CAAyBrB,YAAY,CAACa,mBAAD,CAArC,CAAf;;AACA,MAAIM,MAAJ,EAAY;AACV,QAAIG,OAAO,GAAGH,MAAM,CAACG,OAArB;;AAEA,QAAIA,OAAO,CAACV,UAAR,KAAuB,QAA3B,EAAqC;AACnC;AACAU,MAAAA,OAAO,CAACV,UAAR,GAAqB,IAArB;AACD;;AAED,UAAM;AAAEI,MAAAA,cAAc,GAAG,IAAnB;AAAyBE,MAAAA,gBAAgB,GAAG;AAA5C,QAAqDR,aAA3D;AAEA,UAAMa,MAAM,GAAGP,cAAc,GACzB,MAAM,oBAAM;AACVT,MAAAA,MADU;AAEVe,MAAAA,OAFU;AAGVN,MAAAA,cAHU;AAIVC,MAAAA,eAAe,EACbP,aAAa,CAACO,eAAd,IACAO,IAAI,CAACC,SAAL,CAAe;AACbH,QAAAA,OADa;AAEb,6BAAqBxB,GAAG,CAAC4B;AAFZ,OAAf,CANQ;AAUVR,MAAAA;AAVU,KAAN,CADmB,GAazB,MAAM,wBAAUX,MAAV,EAAkBe,OAAlB,CAbV;;AAeA,QAAIC,MAAJ,EAAY;AACV,aAAO,CAACA,MAAM,CAACI,IAAR,EAAcJ,MAAM,CAACK,GAArB,CAAP;AACD;AACF;;AACD,SAAO,CAACrB,MAAD,EAASC,cAAT,CAAP;AACD","sourcesContent":["import * as babel from '@babel/core';\nimport cache from './vendor/cache';\nimport transform from './vendor/transform';\n\nconst pkg = require('../../../../package.json');\n\nconst injectCaller = (opts: {\n  [key: string]: any;\n  caller?: { [key: string]: any };\n}) => ({\n  ...opts,\n  caller: {\n    name: 'babelWorkerLoader',\n    supportsStaticESM: true,\n    supportsDynamicImport: true,\n    ...opts.caller,\n  },\n});\n\nexport async function process(\n  this: any,\n  source: string,\n  inputSourceMap: string,\n  filename: string,\n  loaderOptions: {\n    sourceMap?: any;\n    sourceMaps?: any;\n    cacheDirectory?: string;\n    cacheIdentifier?: string;\n    cacheCompression?: boolean;\n  },\n  sourceMap: string\n) {\n  if ('sourceMap' in loaderOptions && !('sourceMaps' in loaderOptions)) {\n    loaderOptions = {\n      ...loaderOptions,\n      sourceMaps: loaderOptions.sourceMap,\n    };\n    delete loaderOptions.sourceMap;\n  }\n\n  const programmaticOptions = {\n    ...loaderOptions,\n    filename,\n    inputSourceMap: inputSourceMap || undefined,\n    sourceMaps:\n      loaderOptions.sourceMaps === undefined\n        ? sourceMap\n        : loaderOptions.sourceMaps,\n    sourceFileName: filename,\n  };\n\n  // Remove loader related options\n  delete programmaticOptions.cacheDirectory;\n  delete programmaticOptions.cacheIdentifier;\n  delete programmaticOptions.cacheCompression;\n\n  const config = babel!.loadPartialConfig(injectCaller(programmaticOptions));\n  if (config) {\n    let options = config.options;\n\n    if (options.sourceMaps === 'inline') {\n      // Babel glitch\n      options.sourceMaps = true;\n    }\n\n    const { cacheDirectory = null, cacheCompression = true } = loaderOptions;\n\n    const result = cacheDirectory\n      ? await cache({\n          source,\n          options,\n          cacheDirectory,\n          cacheIdentifier:\n            loaderOptions.cacheIdentifier ||\n            JSON.stringify({\n              options,\n              '@haul-bundle/core': pkg.version,\n            }),\n          cacheCompression,\n        })\n      : await transform(source, options);\n\n    if (result) {\n      return [result.code, result.map];\n    }\n  }\n  return [source, inputSourceMap];\n}\n"],"file":"worker.js"}