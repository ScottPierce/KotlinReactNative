"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.process = process;

var babel = _interopRequireWildcard(require("@babel/core"));

var _cache = _interopRequireDefault(require("./vendor/cache"));

var _transform = _interopRequireDefault(require("./vendor/transform"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const pkg = require('../../../../package.json');

const injectCaller = opts => ({ ...opts,
  caller: {
    name: 'babelWorkerLoader',
    supportsStaticESM: true,
    supportsDynamicImport: true,
    ...opts.caller
  }
});

async function process(source, inputSourceMap, filename, loaderOptions, sourceMap) {
  if ('sourceMap' in loaderOptions && !('sourceMaps' in loaderOptions)) {
    loaderOptions = { ...loaderOptions,
      sourceMaps: loaderOptions.sourceMap
    };
    delete loaderOptions.sourceMap;
  }

  const programmaticOptions = { ...loaderOptions,
    filename,
    inputSourceMap: inputSourceMap || undefined,
    sourceMaps: loaderOptions.sourceMaps === undefined ? sourceMap : loaderOptions.sourceMaps,
    sourceFileName: filename
  }; // Remove loader related options

  delete programmaticOptions.cacheDirectory;
  delete programmaticOptions.cacheIdentifier;
  delete programmaticOptions.cacheCompression;
  const config = babel.loadPartialConfig(injectCaller(programmaticOptions));

  if (config) {
    let options = config.options;

    if (options.sourceMaps === 'inline') {
      // Babel glitch
      options.sourceMaps = true;
    }

    const {
      cacheDirectory = null,
      cacheCompression = true
    } = loaderOptions;
    const result = cacheDirectory ? await (0, _cache.default)({
      source,
      options,
      cacheDirectory,
      cacheIdentifier: loaderOptions.cacheIdentifier || JSON.stringify({
        options,
        '@haul-bundle/core': pkg.version
      }),
      cacheCompression
    }) : await (0, _transform.default)(source, options);

    if (result) {
      return [result.code, result.map];
    }
  }

  return [source, inputSourceMap];
}
//# sourceMappingURL=worker.js.map