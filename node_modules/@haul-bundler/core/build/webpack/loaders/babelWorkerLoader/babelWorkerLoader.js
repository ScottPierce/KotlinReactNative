"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.custom = void 0;

var _loaderUtils = _interopRequireDefault(require("loader-utils"));

var _jestWorker = _interopRequireDefault(require("jest-worker"));

var _signalExit = _interopRequireDefault(require("signal-exit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeLoader() {
  let worker;
  (0, _signalExit.default)(async () => {
    var _worker;

    await ((_worker = worker) === null || _worker === void 0 ? void 0 : _worker.end());
  });
  return async function (source, inputSourceMap) {
    const {
      maxWorkers = 1,
      ...options
    } = _loaderUtils.default.getOptions(this) || {};

    if (worker === undefined) {
      worker = new _jestWorker.default(require.resolve('./worker'), {
        numWorkers: maxWorkers,
        enableWorkerThreads: true
      });
    } // Make the loader async


    const callback = this.async();
    const sourceMap = this.sourceMap;
    const result = await worker // @ts-ignore
    .process(source, inputSourceMap, this.resourcePath, options, sourceMap).then(args => callback === null || callback === void 0 ? void 0 : callback(null, ...args), err => callback === null || callback === void 0 ? void 0 : callback(err));
    return result;
  };
}

const custom = makeLoader;
exports.custom = custom;

var _default = makeLoader();

exports.default = _default;
//# sourceMappingURL=babelWorkerLoader.js.map