"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.version = void 0;

var babel = _interopRequireWildcard(require("@babel/core"));

var _pify = _interopRequireDefault(require("pify"));

var _error = _interopRequireDefault(require("./error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const transform = (0, _pify.default)(babel.transform);

async function _default(source, options) {
  var _map$sourcesContent;

  let result;

  try {
    result = await transform(source, options);
  } catch (err) {
    throw err.message && err.codeFrame ? new _error.default(err) : err;
  }

  if (!result) return null;
  const {
    ast,
    code,
    map,
    metadata,
    sourceType
  } = result;

  if (map === null || map === void 0 ? void 0 : (_map$sourcesContent = map.sourcesContent) === null || _map$sourcesContent === void 0 ? void 0 : _map$sourcesContent.length) {
    map.sourcesContent = [source];
  }

  return {
    ast,
    code,
    map,
    metadata,
    sourceType
  };
}

;
const version = babel.version;
exports.version = version;
//# sourceMappingURL=transform.js.map