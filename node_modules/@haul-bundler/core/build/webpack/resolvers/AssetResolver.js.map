{"version":3,"sources":["../../../src/webpack/resolvers/AssetResolver.ts"],"names":["AssetResolver","collect","list","name","type","platform","regex","test","RegExp","priority","queryPlatform","indexOf","reduce","acc","curr","match","exec","scale","constructor","options","apply","resolver","runtime","hooks","file","tapAsync","request","_","callback","path","fileSystem","readdir","dirname","error","result","basename","replace","split","pop","resolved","includes","map","key","Object","keys","sort","a","b","Number","resolve","logger","warn","resolvedFile","relativePath","join","debug"],"mappings":"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","sourcesContent":["import path from 'path';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport Runtime from '../../runtime/Runtime';\n\ntype Request = {\n  path: string;\n  relativePath: string;\n};\n\ntype Options = {\n  test?: RegExp;\n  platform: string;\n  runtime: Runtime;\n};\n\ntype CollectOutput = {\n  [key: string]: {\n    platform: string;\n    name: string;\n  };\n};\n\ntype CollectOptions = {\n  name: string;\n  platform: string;\n  type: string;\n};\n\nexport default class AssetResolver {\n  static test = /\\.(aac|aiff|bmp|caf|gif|html|jpeg|jpg|m4a|m4v|mov|mp3|mp4|mpeg|mpg|obj|otf|pdf|png|psd|svg|ttf|wav|webm|webp)$/;\n  static collect(\n    list: Array<string>,\n    { name, type, platform }: CollectOptions\n  ): CollectOutput {\n    const regex = /^(bmp|gif|jpg|jpeg|png|psd|tiff|webp|svg)$/.test(type)\n      ? new RegExp(\n          `^${escapeStringRegexp(\n            name\n          )}(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${platform}|native))?\\\\.${type}$`\n        )\n      : new RegExp(\n          `^${escapeStringRegexp(name)}(\\\\.(${platform}|native))?\\\\.${type}$`\n        );\n    const priority = (queryPlatform: string) =>\n      ['native', platform].indexOf(queryPlatform);\n\n    // Build a map of files according to the scale\n    return list.reduce((acc, curr) => {\n      const match = regex.exec(curr);\n\n      if (match) {\n        let [, scale, , , platform] = match;\n        scale = scale || '@1x';\n\n        if (acc[scale] && priority(platform) < priority(acc[scale].platform)) {\n          // do nothing\n          return acc;\n        }\n\n        return { ...acc, [scale]: { platform, name: curr } };\n      }\n\n      return acc;\n    }, {} as CollectOutput);\n  }\n\n  constructor(private options: Options) {}\n\n  apply(resolver: any) {\n    const platform = this.options.platform;\n    const test = this.options.test || AssetResolver.test;\n    const runtime = this.options.runtime;\n\n    resolver.hooks.file.tapAsync(\n      'AssetResolver',\n      (request: Request, _: any, callback: Function) => {\n        if (!test.test(request.path)) {\n          callback();\n          return;\n        }\n\n        resolver.fileSystem.readdir(\n          path.dirname(request.path),\n          (error: Error | null, result: any) => {\n            if (error) {\n              callback();\n              return;\n            }\n\n            const name = path.basename(request.path).replace(/\\.[^.]+$/, '');\n            const type = request.path.split('.').pop() || '';\n\n            let resolved = result.includes(path.basename(request.path))\n              ? request.path\n              : null;\n\n            if (!resolved) {\n              const map = AssetResolver.collect(result, {\n                name,\n                type,\n                platform,\n              });\n              const key = map['@1x']\n                ? '@1x'\n                : Object.keys(map).sort(\n                    (a, b) =>\n                      Number(a.replace(/[^\\d.]/g, '')) -\n                      Number(b.replace(/[^\\d.]/g, ''))\n                  )[0];\n\n              resolved =\n                map[key] && map[key].name\n                  ? path.resolve(path.dirname(request.path), map[key].name)\n                  : null;\n            }\n\n            if (!resolved) {\n              runtime.logger.warn(`Cannot resolve: ${request.path}`);\n              callback();\n              return;\n            }\n\n            const resolvedFile = {\n              ...request,\n              path: resolved,\n              relativePath:\n                request.relativePath &&\n                resolver.join(request.relativePath, resolved),\n              file: true,\n            };\n\n            runtime.logger.debug(\n              `Resolved file: ${request.path} <--> ${resolvedFile.path}`\n            );\n            callback(null, resolvedFile);\n          }\n        );\n      }\n    );\n  }\n}\n"],"file":"AssetResolver.js"}