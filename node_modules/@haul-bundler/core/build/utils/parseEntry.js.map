{"version":3,"sources":["../../src/utils/parseEntry.ts"],"names":["resolvePath","relativeFilePathArray","map","entry","path","resolve","process","cwd","parseMultipleEntries","Array","isArray","Object","keys","reduce","fileArray","key","filesForEntry","push","parseEntry","join"],"mappings":";;;;;;;AACA;;;;AAEA,MAAMA,WAAW,GAAIC,qBAAD,IAClBA,qBAAqB,CAACC,GAAtB,CAA0BC,KAAK,IAAIC,cAAKC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BJ,KAA5B,CAAnC,CADF;;AAGA,SAASK,oBAAT,CAA8BL,KAA9B,EAA+D;AAC7D,MAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;AACxB,WAAOH,WAAW,CAACG,KAAD,CAAlB;AACD;;AAED,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/C,WAAOQ,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,MAAnB,CAA0B,CAACC,SAAD,EAAYC,GAAZ,KAAoB;AACnD,YAAMC,aAAa,GAAGb,KAAK,CAACY,GAAD,CAA3B;;AACA,UAAI,OAAOC,aAAP,KAAyB,QAA7B,EAAuC;AACrCF,QAAAA,SAAS,CAACG,IAAV,CAAeD,aAAf;AACA,eAAOF,SAAP;AACD;;AAEDA,MAAAA,SAAS,CAACG,IAAV,CAAgB,WAAUF,GAAI,GAA9B,EAAkC,GAAGf,WAAW,CAACgB,aAAD,CAAhD;AACA,aAAOF,SAAP;AACD,KATM,EASJ,EATI,CAAP;AAUD;;AAED,SAAOX,KAAP;AACD;;AAEc,SAASe,UAAT,CAAoBf,KAApB,EAA2D;AACxE,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOC,cAAKe,IAAL,CAAUb,OAAO,CAACC,GAAR,EAAV,EAAyBJ,KAAzB,CAAP;AACD;;AACD,MAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,KAAyB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAApE,EAA2E;AACzE,WAAOK,oBAAoB,CAACL,KAAD,CAApB,CAA4BgB,IAA5B,CAAiC,IAAjC,CAAP;AACD;;AAED,SAAOhB,KAAP;AACD","sourcesContent":["import webpack from 'webpack';\nimport path from 'path';\n\nconst resolvePath = (relativeFilePathArray: string[]) =>\n  relativeFilePathArray.map(entry => path.resolve(process.cwd(), entry));\n\nfunction parseMultipleEntries(entry: webpack.Entry | string[]) {\n  if (Array.isArray(entry)) {\n    return resolvePath(entry);\n  }\n\n  if (typeof entry === 'object' && entry !== null) {\n    return Object.keys(entry).reduce((fileArray, key) => {\n      const filesForEntry = entry[key];\n      if (typeof filesForEntry === 'string') {\n        fileArray.push(filesForEntry);\n        return fileArray;\n      }\n\n      fileArray.push(`(chunk: ${key})`, ...resolvePath(filesForEntry));\n      return fileArray;\n    }, [] as string[]);\n  }\n\n  return entry;\n}\n\nexport default function parseEntry(entry: webpack.Configuration['entry']) {\n  if (typeof entry === 'string') {\n    return path.join(process.cwd(), entry);\n  }\n  if (Array.isArray(entry) || (typeof entry === 'object' && entry !== null)) {\n    return parseMultipleEntries(entry).join('\\n');\n  }\n\n  return entry;\n}\n"],"file":"parseEntry.js"}