"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Websocket proxy between debugger and React Native client
 */
class WebsocketDebuggerProxy {
  constructor(runtime, webSocketProxy) {
    this.runtime = runtime;

    _defineProperty(this, "debuggerSocket", void 0);

    _defineProperty(this, "clientSocket", void 0);

    webSocketProxy.onConnection(this.onConnection.bind(this));
  }

  send(socket, message) {
    try {
      socket.send(message);
    } catch (error) {
      this.runtime.logger.warn('Failed to send data to socket', error);
    }
  }
  /**
   * Called everytime new WebSocket connection is established. Each specifies
   * `role` param, which we use to determine type of connection.
   */


  onConnection(socket, request) {
    const {
      url = ''
    } = request;

    if (url.indexOf('role=debugger') >= 0) {
      this.runtime.logger.info('Chrome Remote debugger connected');
      this.handleDebuggerSocket(socket);
    } else if (url.indexOf('role=client') >= 0) {
      this.runtime.logger.info('React Native debugger client connected');
      this.handleClientSocket(socket);
    } else {
      socket.close(1011, 'Missing role param');
    }
  }
  /**
   * Debugger socket handler
   *
   * Note: When debugger is already connected, new connection gets
   * closed automatically
   */


  handleDebuggerSocket(socket) {
    if (this.debuggerSocket) {
      socket.close(1011, 'Another debugger is already connected');
      return;
    }

    this.debuggerSocket = socket;

    const onCloseHandler = () => {
      this.runtime.logger.info('Chrome Remote debugger disconnected');
      this.debuggerSocket = undefined;

      if (this.clientSocket) {
        this.clientSocket.close(1011, 'Debugger was disconnected');
      }
    };

    this.debuggerSocket.onerror = onCloseHandler;
    this.debuggerSocket.onclose = onCloseHandler;

    this.debuggerSocket.onmessage = ({
      data
    }) => {
      if (this.clientSocket) {
        this.send(this.clientSocket, data.toString());
      }
    };
  }
  /**
   * Client socket handler
   *
   * Note: New client automatically closes previous client connection
   */


  handleClientSocket(socket) {
    if (this.clientSocket) {
      this.clientSocket.onerror = undefined;
      this.clientSocket.onclose = undefined;
      this.clientSocket.onmessage = undefined;
      this.clientSocket.close(1011, 'Another client is connected');
    }

    const onCloseHandler = () => {
      this.runtime.logger.info('React Native debugger client disconnected');
      this.clientSocket = undefined;

      if (this.debuggerSocket) {
        this.send(this.debuggerSocket, JSON.stringify({
          method: '$disconnected'
        }));
      }
    };

    this.clientSocket = socket;
    this.clientSocket.onerror = onCloseHandler;
    this.clientSocket.onclose = onCloseHandler;

    this.clientSocket.onmessage = ({
      data
    }) => {
      if (this.debuggerSocket) {
        this.send(this.debuggerSocket, data.toString());
      }
    };
  }

  isDebuggerConnected() {
    return !!this.debuggerSocket;
  }

}

exports.default = WebsocketDebuggerProxy;
//# sourceMappingURL=WebSocketDebuggerProxy.js.map