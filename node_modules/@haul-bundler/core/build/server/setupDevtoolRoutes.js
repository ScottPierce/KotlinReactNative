"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setupDevtoolRoutes;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _joi = _interopRequireDefault(require("@hapi/joi"));

var _launchBrowser = _interopRequireDefault(require("./launchBrowser"));

var _openInEditor = _interopRequireDefault(require("./openInEditor"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultAndroidEmulatorHostnames = ['10.0.2.2', '10.0.3.2']; // If no debug_http_host is set, use localhost as the hostname.
// The iOS Simulator will use localhost as a default.

function getHostname(hostname) {
  return defaultAndroidEmulatorHostnames.includes(hostname) ? 'localhost' : hostname;
}

function setupDevtoolRoutes(runtime, server, {
  isDebuggerConnected
}) {
  server.route({
    method: 'GET',
    path: '/launch-js-devtools',
    handler: request => {
      // Open debugger page only if it's not already open.
      const host = getHostname(request.url.hostname);

      if (!isDebuggerConnected()) {
        (0, _launchBrowser.default)(runtime, `http://${host}:${request.url.port}/debugger-ui`);
      }

      return 'OK';
    }
  });
  server.route({
    method: 'POST',
    path: '/open-stack-frame',
    options: {
      validate: {
        payload: {
          file: _joi.default.string().required(),
          lineNumber: _joi.default.number().required(),
          column: _joi.default.number().required(),
          methodName: _joi.default.string().required()
        }
      }
    },
    handler: async request => {
      const {
        file,
        lineNumber,
        column
      } = request.payload;
      const url = `${file}:${lineNumber}:${column}`;
      await (0, _openInEditor.default)(runtime, url);
      return 'OK';
    }
  });
  server.route({
    method: 'POST',
    path: '/systrace',
    options: {
      payload: {
        output: 'data',
        parse: false
      }
    },
    handler: async (request, h) => {
      const filename = `/tmp/haul_${Date.now()}.json`;
      const message = `We've saved the trace report at ${runtime.logger.enhanceWithModifier('bold', filename)}\nYou can open the trace report in Google Chrome by navigating to 'chrome://tracing' and clicking 'load'.`;

      try {
        await (0, _util.promisify)(_fs.default.writeFile)(filename, request.payload);
        runtime.logger.info(message);
      } catch (error) {
        return h.response().code(200);
      }

      return message;
    }
  });
  server.route({
    method: 'GET',
    path: '/status',
    handler: () => 'packager-status:running'
  });
  server.route({
    method: 'GET',
    path: '/debugger-ui',
    handler: {
      file: {
        path: _path.default.join(__dirname, '../../assets/debugger.html'),
        confine: false
      }
    }
  });
  server.route({
    method: 'GET',
    path: '/debugger-ui/{param*}',
    handler: {
      directory: {
        path: _path.default.join(__dirname, '../../assets'),
        redirectToSlash: true
      }
    }
  });
}
//# sourceMappingURL=setupDevtoolRoutes.js.map