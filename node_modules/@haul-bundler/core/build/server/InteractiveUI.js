"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ansiFragments = require("ansi-fragments");

var _wrapAnsi = _interopRequireDefault(require("wrap-ansi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Logs {
  constructor() {
    _defineProperty(this, "autoFollow", true);

    _defineProperty(this, "sliceStart", 0);

    _defineProperty(this, "sliceMaxLength", 0);

    _defineProperty(this, "maxLineWidth", 0);

    _defineProperty(this, "lines", []);
  }

  get length() {
    return this.lines.length;
  }

  getSlice() {
    return this.lines.slice(this.sliceStart, this.sliceStart + this.sliceMaxLength);
  }

  clear() {
    this.lines = [];
  }

  addItem(item) {
    const lines = item.split('\n').reduce((acc, line) => {
      const wrappedLine = (0, _wrapAnsi.default)(line, this.maxLineWidth, {
        hard: true
      });
      return acc.concat(...wrappedLine.split('\n'));
    }, []);
    this.lines.push(...lines);

    if (this.length > this.sliceMaxLength && this.autoFollow) {
      this.sliceStart = this.length - this.sliceMaxLength;
    }
  }

}

class InteractiveUserInterface {
  constructor(terminal) {
    _defineProperty(this, "terminal", void 0);

    _defineProperty(this, "logs", new Logs());

    _defineProperty(this, "compilations", {});

    _defineProperty(this, "LOGS_START_Y", 3);

    this.terminal = terminal;
  }

  renderLogsSection() {
    this.terminal.moveTo(0, 0);
    this.terminal.eraseLine();
    this.terminal((0, _ansiFragments.container)((0, _ansiFragments.color)('gray', '['), (0, _ansiFragments.color)('blue', (0, _ansiFragments.modifier)('bold', 'Logs')), (0, _ansiFragments.color)('gray', ']')).build());
  }

  renderCompilationsSection(platforms) {
    this.terminal.moveTo(0, this.terminal.height - platforms.length - 2);
    this.terminal((0, _ansiFragments.container)((0, _ansiFragments.color)('gray', '['), (0, _ansiFragments.color)('blue', (0, _ansiFragments.modifier)('bold', 'Compilations')), (0, _ansiFragments.color)('gray', ']')).build());
  }

  createCompilations(platforms) {
    const leftMargin = 4;
    const platformNameLength = Math.max(...platforms.map(platform => platform.length));
    platforms.forEach((platform, index) => {
      this.compilations[platform] = {
        width: Math.min(110, this.terminal.width) - (platformNameLength + 22),
        value: 0,
        title: `${' '.repeat(platformNameLength - platform.length)}${platform.toUpperCase()}:`,
        x: leftMargin,
        y: this.terminal.height - platforms.length + index,
        running: false
      };
    });
  }

  renderCompilationsProgress() {
    Object.keys(this.compilations).forEach(platform => {
      const compilation = this.compilations[platform];
      this.terminal.moveTo(compilation.x, compilation.y);
      this.terminal.eraseLine();
      this.terminal((0, _ansiFragments.color)('magenta', (0, _ansiFragments.modifier)('bold', compilation.title), (0, _ansiFragments.pad)(1)).build());
      const barWidth = Math.max(0, Math.floor(compilation.value * compilation.width));
      this.terminal((0, _ansiFragments.container)(compilation.running ? 'running' : '   idle', (0, _ansiFragments.pad)(1), '[', '='.repeat(barWidth), '>', ' '.repeat(compilation.width - barWidth), ']', (0, _ansiFragments.pad)(1), (0, _ansiFragments.color)('yellow', `${Math.floor(compilation.value * 100)}%`)).build());
    });
  }

  updateCompilationProgress(platform, {
    running,
    value
  }) {
    this.compilations[platform].running = running;
    this.compilations[platform].value = Math.min(1, value);
    this.renderCompilationsProgress();
  }

  renderLogs() {
    this.terminal.moveTo(0, this.LOGS_START_Y);
    this.logs.getSlice().forEach((log, index) => {
      this.terminal.moveTo(0, this.LOGS_START_Y + index);
      this.terminal.eraseLine();
      this.terminal(log);
    });
  }

  addLogItem(item) {
    this.logs.addItem(item);

    if (this.logs.length < this.logs.sliceMaxLength || this.logs.autoFollow) {
      this.renderLogs();
    }

    this.renderLogsSection();
  }

  dispose(exitCode = 0, exit = true) {
    this.terminal.grabInput(false);
    this.terminal.hideCursor(false);
    this.terminal.fullscreen(false);

    if (exit) {
      this.terminal.processExit(exitCode);
    }
  }

  start(platforms) {
    this.logs.sliceStart = 0;
    this.logs.sliceMaxLength = this.terminal.height - platforms.length - 6;
    this.logs.maxLineWidth = this.terminal.width - 2;
    this.terminal.fullscreen(true);
    this.terminal.grabInput({
      mouse: 'motion'
    });
    this.terminal.hideCursor();
    this.terminal.on('mouse', name => {
      if (this.logs.length > this.logs.sliceMaxLength) {
        if (name === 'MOUSE_WHEEL_UP') {
          this.logs.sliceStart = Math.max(0, this.logs.sliceStart - 1);
          this.logs.autoFollow = false;
          this.renderLogs();
        } else if (name === 'MOUSE_WHEEL_DOWN') {
          this.logs.sliceStart = Math.min(this.logs.length - this.logs.sliceMaxLength, this.logs.sliceStart + 1);

          if (this.logs.sliceStart + this.logs.sliceMaxLength === this.logs.length) {
            this.logs.autoFollow = true;
          }

          this.renderLogs();
          this.renderLogsSection();
        }
      }
    });
    this.terminal.on('key', name => {
      if (name === 'CTRL_C') {
        this.dispose();
      }
    });
    this.terminal.on('resize', (width, height) => {
      this.terminal.clear();
      this.logs.sliceMaxLength = height - platforms.length - 6;
      this.logs.maxLineWidth = width - 10;
      this.logs.clear(); // eslint-disable-next-line no-console

      console.log('Logs cleared due to terminal resize');
      this.renderLogsSection();
      this.renderLogs();
      const platformNameLength = Math.max(...platforms.map(platform => platform.length));
      Object.keys(this.compilations).forEach(platform => {
        this.compilations[platform].width = Math.min(110, this.terminal.width) - (platformNameLength + 20);
      });
      this.renderCompilationsSection(platforms);
      this.renderCompilationsProgress();
    });
    this.renderLogsSection();
    this.renderLogs();
    this.createCompilations(platforms);
    this.renderCompilationsSection(platforms);
    this.renderCompilationsProgress();
  }

}

exports.default = InteractiveUserInterface;
//# sourceMappingURL=InteractiveUI.js.map