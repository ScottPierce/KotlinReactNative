{"version":3,"sources":["../../src/server/setupLiveReload.ts"],"names":["setupLiveReload","runtime","server","compiler","watchers","headers","notifyAllWatchers","forEach","watcher","res","writeHead","end","JSON","stringify","changed","on","Compiler","Events","BUILD_FINISHED","route","method","path","handler","request","Promise","resolve","raw","push","req","index","indexOf","splice","logger","info"],"mappings":";;;;;;;AAGA;;;;AADA;AAGe,SAASA,eAAT,CACbC,OADa,EAEbC,MAFa,EAGbC,QAHa,EAIb;AACA,MAAIC,QAA0B,GAAG,EAAjC;AACA,QAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;;AAIA,WAASC,iBAAT,GAA6B;AAC3BF,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAO,IAAI;AAC1BA,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,CAAsB,GAAtB,EAA2BL,OAA3B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAgBC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAf,CAAhB;AACD,KAHD;AAKAV,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAEDD,EAAAA,QAAQ,CAACY,EAAT,CAAYC,kBAASC,MAAT,CAAgBC,cAA5B,EAA4C,MAAM;AAChDZ,IAAAA,iBAAiB;AAClB,GAFD;AAIAJ,EAAAA,MAAM,CAACiB,KAAP,CAAa;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,IAAI,EAAE,WAFK;AAGXC,IAAAA,OAAO,EAAEC,OAAO,IACd,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACrB;;;;AAIA,YAAMjB,OAAO,GAAGe,OAAO,CAACG,GAAxB;AACAtB,MAAAA,QAAQ,CAACuB,IAAT,CAAcnB,OAAd;AACAA,MAAAA,OAAO,CAACoB,GAAR,CAAYb,EAAZ,CAAe,OAAf,EAAwB,MAAM;AAC5B,cAAMc,KAAK,GAAGzB,QAAQ,CAAC0B,OAAT,CAAiBtB,OAAjB,CAAd;;AACA,YAAIqB,KAAK,IAAI,CAAb,EAAgB;AACdzB,UAAAA,QAAQ,CAAC2B,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AACAJ,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,OAND;AAOD,KAdD;AAJS,GAAb;AAqBAvB,EAAAA,MAAM,CAACiB,KAAP,CAAa;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,IAAI,EAAE,YAFK;AAGXC,IAAAA,OAAO,EAAE,MAAM;AACbrB,MAAAA,OAAO,CAAC+B,MAAR,CAAeC,IAAf,CACE,uEADF;AAGA3B,MAAAA,iBAAiB;AACjB,aAAO,IAAP;AACD;AATU,GAAb;AAWD","sourcesContent":["import Hapi, { Request } from '@hapi/hapi';\nimport Runtime from '../runtime/Runtime';\n// @ts-ignore\nimport Compiler from '@haul-bundler/core-legacy/build/compiler/Compiler';\n\nexport default function setupLiveReload(\n  runtime: Runtime,\n  server: Hapi.Server,\n  compiler: any\n) {\n  let watchers: Request['raw'][] = [];\n  const headers = {\n    'Content-Type': 'application/json; charset=UTF-8',\n  };\n\n  function notifyAllWatchers() {\n    watchers.forEach(watcher => {\n      watcher.res.writeHead(205, headers);\n      watcher.res.end(JSON.stringify({ changed: true }));\n    });\n\n    watchers = [];\n  }\n\n  compiler.on(Compiler.Events.BUILD_FINISHED, () => {\n    notifyAllWatchers();\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/onchange',\n    handler: request =>\n      new Promise(resolve => {\n        /**\n         * React Native client opens connection at `/onchange`\n         * and awaits reload signal (http status code - 205)\n         */\n        const watcher = request.raw;\n        watchers.push(watcher);\n        watcher.req.on('close', () => {\n          const index = watchers.indexOf(watcher);\n          if (index >= 0) {\n            watchers.splice(index, 1);\n            resolve('OK');\n          }\n        });\n      }),\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/reloadapp',\n    handler: () => {\n      runtime.logger.info(\n        'Attempt to reload the app, make sure you have enabled Live Reloading!'\n      );\n      notifyAllWatchers();\n      return 'OK';\n    },\n  });\n}\n"],"file":"setupLiveReload.js"}