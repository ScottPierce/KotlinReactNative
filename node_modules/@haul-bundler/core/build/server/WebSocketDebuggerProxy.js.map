{"version":3,"sources":["../../src/server/WebSocketDebuggerProxy.ts"],"names":["WebsocketDebuggerProxy","constructor","runtime","webSocketProxy","onConnection","bind","send","socket","message","error","logger","warn","request","url","indexOf","info","handleDebuggerSocket","handleClientSocket","close","debuggerSocket","onCloseHandler","undefined","clientSocket","onerror","onclose","onmessage","data","toString","JSON","stringify","method","isDebuggerConnected"],"mappings":"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","sourcesContent":["import _WebSocket from 'ws';\nimport { Assign } from 'utility-types';\nimport { WebSocketProxy } from './websocketProxy';\nimport Runtime from '../runtime/Runtime';\nimport { IncomingMessage } from 'http';\n\ntype WebSocket = Assign<\n  _WebSocket,\n  {\n    onerror?: _WebSocket['onerror'];\n    onclose?: _WebSocket['onclose'];\n    onmessage?: _WebSocket['onmessage'];\n  }\n>;\n\n/**\n * Websocket proxy between debugger and React Native client\n */\nexport default class WebsocketDebuggerProxy {\n  debuggerSocket: WebSocket | undefined;\n  clientSocket: WebSocket | undefined;\n\n  constructor(private runtime: Runtime, webSocketProxy: WebSocketProxy) {\n    webSocketProxy.onConnection(this.onConnection.bind(this));\n  }\n\n  send(socket: WebSocket, message: string) {\n    try {\n      socket.send(message);\n    } catch (error) {\n      this.runtime.logger.warn('Failed to send data to socket', error);\n    }\n  }\n\n  /**\n   * Called everytime new WebSocket connection is established. Each specifies\n   * `role` param, which we use to determine type of connection.\n   */\n  onConnection(socket: WebSocket, request: IncomingMessage) {\n    const { url = '' } = request;\n    if (url.indexOf('role=debugger') >= 0) {\n      this.runtime.logger.info('Chrome Remote debugger connected');\n      this.handleDebuggerSocket(socket);\n    } else if (url.indexOf('role=client') >= 0) {\n      this.runtime.logger.info('React Native debugger client connected');\n      this.handleClientSocket(socket);\n    } else {\n      socket.close(1011, 'Missing role param');\n    }\n  }\n\n  /**\n   * Debugger socket handler\n   *\n   * Note: When debugger is already connected, new connection gets\n   * closed automatically\n   */\n  handleDebuggerSocket(socket: WebSocket) {\n    if (this.debuggerSocket) {\n      socket.close(1011, 'Another debugger is already connected');\n      return;\n    }\n\n    this.debuggerSocket = socket;\n\n    const onCloseHandler = () => {\n      this.runtime.logger.info('Chrome Remote debugger disconnected');\n      this.debuggerSocket = undefined;\n      if (this.clientSocket) {\n        this.clientSocket.close(1011, 'Debugger was disconnected');\n      }\n    };\n\n    this.debuggerSocket.onerror = onCloseHandler;\n    this.debuggerSocket.onclose = onCloseHandler;\n\n    this.debuggerSocket.onmessage = ({ data }) => {\n      if (this.clientSocket) {\n        this.send(this.clientSocket, data.toString());\n      }\n    };\n  }\n\n  /**\n   * Client socket handler\n   *\n   * Note: New client automatically closes previous client connection\n   */\n  handleClientSocket(socket: WebSocket) {\n    if (this.clientSocket) {\n      this.clientSocket.onerror = undefined;\n      this.clientSocket.onclose = undefined;\n      this.clientSocket.onmessage = undefined;\n      this.clientSocket.close(1011, 'Another client is connected');\n    }\n\n    const onCloseHandler = () => {\n      this.runtime.logger.info('React Native debugger client disconnected');\n      this.clientSocket = undefined;\n      if (this.debuggerSocket) {\n        this.send(\n          this.debuggerSocket,\n          JSON.stringify({ method: '$disconnected' })\n        );\n      }\n    };\n\n    this.clientSocket = socket;\n    this.clientSocket.onerror = onCloseHandler;\n    this.clientSocket.onclose = onCloseHandler;\n\n    this.clientSocket.onmessage = ({ data }) => {\n      if (this.debuggerSocket) {\n        this.send(this.debuggerSocket, data.toString());\n      }\n    };\n  }\n\n  isDebuggerConnected() {\n    return !!this.debuggerSocket;\n  }\n}\n"],"file":"WebSocketDebuggerProxy.js"}