"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setupLiveReload;

var _Compiler = _interopRequireDefault(require("@haul-bundler/core-legacy/build/compiler/Compiler"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-ignore
function setupLiveReload(runtime, server, compiler) {
  let watchers = [];
  const headers = {
    'Content-Type': 'application/json; charset=UTF-8'
  };

  function notifyAllWatchers() {
    watchers.forEach(watcher => {
      watcher.res.writeHead(205, headers);
      watcher.res.end(JSON.stringify({
        changed: true
      }));
    });
    watchers = [];
  }

  compiler.on(_Compiler.default.Events.BUILD_FINISHED, () => {
    notifyAllWatchers();
  });
  server.route({
    method: 'GET',
    path: '/onchange',
    handler: request => new Promise(resolve => {
      /**
       * React Native client opens connection at `/onchange`
       * and awaits reload signal (http status code - 205)
       */
      const watcher = request.raw;
      watchers.push(watcher);
      watcher.req.on('close', () => {
        const index = watchers.indexOf(watcher);

        if (index >= 0) {
          watchers.splice(index, 1);
          resolve('OK');
        }
      });
    })
  });
  server.route({
    method: 'GET',
    path: '/reloadapp',
    handler: () => {
      runtime.logger.info('Attempt to reload the app, make sure you have enabled Live Reloading!');
      notifyAllWatchers();
      return 'OK';
    }
  });
}
//# sourceMappingURL=setupLiveReload.js.map