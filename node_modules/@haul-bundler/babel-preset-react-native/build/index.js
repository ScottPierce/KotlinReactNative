"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTypeScriptSource = isTypeScriptSource;
exports.isTSXSource = isTSXSource;
exports.isReactNative = isReactNative;
exports.getDefaultPrePlugins = getDefaultPrePlugins;
exports.getDefaultPostPlugins = getDefaultPostPlugins;
exports.getHermesPlugins = getHermesPlugins;
exports.getChakraPlugins = getChakraPlugins;
exports.getHaulPlugins = getHaulPlugins;
exports.getTsPlugins = getTsPlugins;
exports.getReactNativePlugins = getReactNativePlugins;
exports.getDevelopmentEnvPlugins = getDevelopmentEnvPlugins;
exports.getTestEnvPlugins = getTestEnvPlugins;
exports.default = getHaulBabelPreset;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isTypeScriptSource(fileName) {
  return !!fileName && fileName.endsWith('.ts');
}

function isTSXSource(fileName) {
  return !!fileName && fileName.endsWith('.tsx');
}

function isReactNative(fileName) {
  return !!fileName && fileName.includes(`node_modules${_path.default.sep}react-native`);
}

const commonJsPlugin = ['@babel/plugin-transform-modules-commonjs', {
  allowTopLevelThis: true
}];

function getDefaultPrePlugins() {
  return [// The flow strip types plugin must go BEFORE class properties!
  ['@babel/plugin-transform-flow-strip-types'], ['@babel/plugin-proposal-class-properties', {
    loose: true
  }], ['@babel/plugin-proposal-optional-catch-binding'], ['@babel/plugin-syntax-dynamic-import'], ['@babel/plugin-syntax-export-default-from'], ['@babel/plugin-transform-react-jsx'], ['@babel/plugin-transform-sticky-regex'], ['@babel/plugin-transform-unicode-regex'], [// For some reason native async/await don't behave correctly
  // on RN 0.59 on both platforms, so we need to transpile it
  // to native Promises.
  './transforms/superMemberArrowFunction'], ['@babel/plugin-transform-async-to-generator']];
}

function getDefaultPostPlugins() {
  return [['@babel/plugin-transform-exponentiation-operator'], ['@babel/plugin-proposal-nullish-coalescing-operator', {
    loose: true
  }], ['@babel/plugin-proposal-optional-chaining', {
    loose: true
  }], ['@babel/plugin-transform-react-display-name'], ['metro-react-native-babel-preset/src/transforms/transform-symbol-member']];
}

function getHermesPlugins() {
  // Additional plugins for Hermes because it doesn't support ES6 yet
  return [['@babel/plugin-transform-computed-properties'], ['@babel/plugin-transform-destructuring'], ['@babel/plugin-transform-regenerator'], ['@babel/plugin-transform-shorthand-properties'], ['@babel/plugin-transform-classes'], ['@babel/plugin-transform-arrow-functions'], ['@babel/plugin-transform-spread'], ['@babel/plugin-proposal-object-rest-spread'], ['@babel/plugin-transform-template-literals', {
    loose: true
  }], ['@babel/plugin-transform-for-of', {
    loose: true
  }]];
}

function getChakraPlugins() {
  return [['@babel/plugin-transform-spread'], ['@babel/plugin-proposal-object-rest-spread']];
}

function getHaulPlugins({
  platform
}) {
  return [[require.resolve('./transforms/stripDeadPlatformSelect'), {
    platform
  }]];
}

function getTsPlugins({
  isTSX
}) {
  return [['@babel/plugin-transform-typescript', {
    isTSX
  }]];
}

function getReactNativePlugins() {
  return [commonJsPlugin];
}

function getDevelopmentEnvPlugins() {
  return [['@babel/plugin-transform-react-jsx-source']];
}

function getTestEnvPlugins() {
  return [commonJsPlugin, ...getDevelopmentEnvPlugins()];
}

function requirePlugin(plugin) {
  return [require(plugin[0])].concat(...(plugin[1] ? [plugin[1]] : []));
}

function getHaulBabelPreset(api, options) {
  return {
    compact: false,
    env: {
      // Add CommonJS transform when running in NODE_ENV === test, for example when testing.
      test: {
        plugins: getTestEnvPlugins().map(requirePlugin)
      },
      development: {
        plugins: getDevelopmentEnvPlugins().map(requirePlugin)
      }
    },
    overrides: [{
      plugins: [...getDefaultPrePlugins().map(requirePlugin), ...(options.hermes ? getHermesPlugins() : []).map(requirePlugin), ...(options.chakra ? getChakraPlugins() : []).map(requirePlugin), ...(process.env.HAUL_PLATFORM ? getHaulPlugins({
        platform: process.env.HAUL_PLATFORM
      }) : []).map(requirePlugin)]
    }, {
      test: isReactNative,
      plugins: getReactNativePlugins().map(requirePlugin)
    }, {
      test: isTypeScriptSource,
      plugins: getTsPlugins({
        isTSX: false
      }).map(requirePlugin)
    }, {
      test: isTSXSource,
      plugins: getTsPlugins({
        isTSX: true
      }).map(requirePlugin)
    }, {
      plugins: getDefaultPostPlugins().map(requirePlugin)
    }]
  };
}
//# sourceMappingURL=index.js.map