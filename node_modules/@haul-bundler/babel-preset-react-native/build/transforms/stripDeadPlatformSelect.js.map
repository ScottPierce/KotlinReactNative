{"version":3,"sources":["../../src/transforms/stripDeadPlatformSelect.ts"],"names":["stripDeadPlatformSelect","visitor","CallExpression","path","state","babel","types","isMemberExpression","node","callee","isIdentifier","object","property","name","isObjectExpression","arguments","platformsSpecs","canStripPlatformSelect","targetCase","defaultCase","additionalProperties","properties","forEach","isObjectProperty","key","opts","platform","push","replaceWithSourceString","replaceWith","value","filter","Boolean"],"mappings":";;;;;;;AAAA;;;;;;AAEe,SAASA,uBAAT,GAAmC;AAChD,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,cAAc,CACZC,IADY,EAEZC,KAFY,EAGZ;AACA,YACEC,KAAK,CAACC,KAAN,CAAYC,kBAAZ,CAA+BJ,IAAI,CAACK,IAAL,CAAUC,MAAzC,KACAJ,KAAK,CAACC,KAAN,CAAYI,YAAZ,CAAyBP,IAAI,CAACK,IAAL,CAAUC,MAAV,CAAiBE,MAA1C,CADA,IAEAN,KAAK,CAACC,KAAN,CAAYI,YAAZ,CAAyBP,IAAI,CAACK,IAAL,CAAUC,MAAV,CAAiBG,QAA1C,CAFA,IAGAT,IAAI,CAACK,IAAL,CAAUC,MAAV,CAAiBE,MAAjB,CAAwBE,IAAxB,KAAiC,UAHjC,IAIAV,IAAI,CAACK,IAAL,CAAUC,MAAV,CAAiBG,QAAjB,CAA0BC,IAA1B,KAAmC,QAJnC,IAKAR,KAAK,CAACC,KAAN,CAAYQ,kBAAZ,CAA+BX,IAAI,CAACK,IAAL,CAAUO,SAAV,CAAoB,CAApB,CAA/B,CANF,EAOE;AACA,gBAAMC,cAAc,GAAIb,IAAI,CAACK,IAAL,CACrBO,SADqB,CACX,CADW,CAAxB;AAGA,cAAIE,sBAAsB,GAAG,IAA7B;AACA,cAAIC,UAAJ;AACA,cAAIC,WAAJ;AACA,gBAAMC,oBAAgE,GAAG,EAAzE;AAEAJ,UAAAA,cAAc,CAACK,UAAf,CAA0BC,OAA1B,CAAkCV,QAAQ,IAAI;AAC5C,gBACEP,KAAK,CAACC,KAAN,CAAYiB,gBAAZ,CAA6BX,QAA7B,KACAP,KAAK,CAACC,KAAN,CAAYI,YAAZ,CAAyBE,QAAQ,CAACY,GAAlC,CAFF,EAGE;AACA,kBAAIZ,QAAQ,CAACY,GAAT,CAAaX,IAAb,KAAsB,SAA1B,EAAqC;AACnCM,gBAAAA,WAAW,GAAGP,QAAd;AACD,eAFD,MAEO,IAAIA,QAAQ,CAACY,GAAT,CAAaX,IAAb,KAAsBT,KAAK,CAACqB,IAAN,CAAWC,QAArC,EAA+C;AACpDR,gBAAAA,UAAU,GAAGN,QAAb;AACD;AACF,aATD,MASO;AACLK,cAAAA,sBAAsB,GAAG,KAAzB;AACAG,cAAAA,oBAAoB,CAACO,IAArB,CAA0Bf,QAA1B;AACD;AACF,WAdD,EATA,CAyBA;;AACA,cAAIM,UAAJ,EAAgB;AACdD,YAAAA,sBAAsB,GAAG,IAAzB;AACD;;AAED,cAAI,CAACC,UAAD,IAAe,CAACC,WAAhB,IAA+BF,sBAAnC,EAA2D;AACzDd,YAAAA,IAAI,CAACyB,uBAAL,CAA6B,WAA7B;AACD,WAFD,MAEO,IAAIX,sBAAsB,KAAKC,UAAU,IAAIC,WAAnB,CAA1B,EAA2D;AAChEhB,YAAAA,IAAI,CAAC0B,WAAL,CAAiB,CAACX,UAAU,IAAIC,WAAf,EAA6BW,KAA9C;AACD,WAFM,MAEA;AACLd,YAAAA,cAAc,CAACK,UAAf,GAA4B,CAC1BH,UAAU,IAAIC,WADY,EAE1B,GAAGC,oBAFuB,EAG1BW,MAH0B,CAGnBC,OAHmB,CAA5B;AAID;AACF;AACF;;AArDM;AADJ,GAAP;AAyDD","sourcesContent":["import * as babel from '@babel/core';\n\nexport default function stripDeadPlatformSelect() {\n  return {\n    visitor: {\n      CallExpression(\n        path: babel.NodePath<babel.types.CallExpression>,\n        state: { opts: { platform: string } }\n      ) {\n        if (\n          babel.types.isMemberExpression(path.node.callee) &&\n          babel.types.isIdentifier(path.node.callee.object) &&\n          babel.types.isIdentifier(path.node.callee.property) &&\n          path.node.callee.object.name === 'Platform' &&\n          path.node.callee.property.name === 'select' &&\n          babel.types.isObjectExpression(path.node.arguments[0])\n        ) {\n          const platformsSpecs = (path.node\n            .arguments[0] as unknown) as babel.types.ObjectExpression;\n\n          let canStripPlatformSelect = true;\n          let targetCase: babel.types.ObjectProperty | undefined;\n          let defaultCase: babel.types.ObjectProperty | undefined;\n          const additionalProperties: babel.types.ObjectExpression['properties'] = [];\n\n          platformsSpecs.properties.forEach(property => {\n            if (\n              babel.types.isObjectProperty(property) &&\n              babel.types.isIdentifier(property.key)\n            ) {\n              if (property.key.name === 'default') {\n                defaultCase = property;\n              } else if (property.key.name === state.opts.platform) {\n                targetCase = property;\n              }\n            } else {\n              canStripPlatformSelect = false;\n              additionalProperties.push(property);\n            }\n          });\n\n          // If we got exact mach, we can strip the rest\n          if (targetCase) {\n            canStripPlatformSelect = true;\n          }\n\n          if (!targetCase && !defaultCase && canStripPlatformSelect) {\n            path.replaceWithSourceString('undefined');\n          } else if (canStripPlatformSelect && (targetCase || defaultCase)) {\n            path.replaceWith((targetCase || defaultCase)!.value as any);\n          } else {\n            platformsSpecs.properties = [\n              targetCase || defaultCase,\n              ...additionalProperties,\n            ].filter(Boolean) as babel.types.ObjectExpression['properties'];\n          }\n        }\n      },\n    },\n  };\n}\n"],"file":"stripDeadPlatformSelect.js"}