"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = superMemberArrowFunction;

var _template = _interopRequireDefault(require("@babel/template"));

var babel = _interopRequireWildcard(require("@babel/core"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * With Webpack and babel-loader the following code:
 * ```js
 * class Derived extends Super {
 *   derivedFn1 = async () => {
 *     await super.superFn1();
 *   }
 *
 *   derivedFn2 = () => {
 *     super.superFn2();
 *   }
 * }
 * ```
 * will fail with an exception: `super` cannot be used outside of a class method.
 * However this is a valid syntax, which successfully run for example on V8 or Chrome,
 * so we need to transform `super` to use `Super.prototype`:
 * ```js
 * class Derived extends Super {
 *   derivedFn1 = async () => {
 *     await Super.prototype.superFn1.call(this);
 *   }
 *
 *   derivedFn2 = () => {
 *     Super.prototype.superFn2.call(this);
 *   }
 * }
 * ```
 */
const template = (0, _template.default)('SUPER.prototype.METHOD.call(this, ARGS)');

function superMemberArrowFunction() {
  return {
    visitor: {
      Program(programPath) {
        programPath.traverse({
          Super(path) {
            let parentFunctionPath = path.getFunctionParent(); // Check if parent function is an arrow function as a class property.

            if (parentFunctionPath.isArrowFunctionExpression() && parentFunctionPath.parentPath.isClassProperty()) {
              // Find the parent class, and make sure it's extending from an identifier
              let parentClass = path.findParent(p => p.isClass());

              if ((parentClass === null || parentClass === void 0 ? void 0 : parentClass.node.superClass) && babel.types.isIdentifier(parentClass.node.superClass)) {
                path.parentPath.parentPath.replaceWith(template({
                  SUPER: parentClass.node.superClass,
                  METHOD: path.parent.property,
                  ARGS: path.parentPath.parent.arguments
                }));
              }
            }
          }

        });
      }

    }
  };
}
//# sourceMappingURL=superMemberArrowFunction.js.map